function collisionDetection(t,e,i,n,o,s,r){let a=t,c=e;n>t?a=n:t>n+s&&(a=n+s),o>e?c=o:e>o+r&&(c=o+r);let h=t-a,l=e-c;return i>=Math.sqrt(h*h+l*l)}function render(){ctx.clearRect(0,0,keepAliveCanvas.width,keepAliveCanvas.height),ctx.fillStyle=`rgb(0,0,0)`,ctx.fillRect(0,0,keepAliveCanvas.width,keepAliveCanvas.height),connection.render(),stage.render()}function update(){rightPressed&&stage.clockWise(),leftPressed&&stage.antiClockWise(),stage.update()}function loop(){return stage.levelCompleted?(document.getElementById("keep-alive-canvas").style.display="none",void(levelCounter<totalLevels?(document.getElementById(`${levelCounter}_levelText`).style.display="block",document.getElementById(`${levelCounter}_level_score`).innerHTML=stage.score,setTimeout(()=>{document.getElementById(`${levelCounter}_levelText`).style.display="none";levelCounter++;start(levelCounter)},1e3)):(document.getElementById(`endGameText`).style.display="block",document.getElementById(`${levelCounter}_level_score`).innerHTML=stage.score))):stage.life?(requestAnimationFrame(loop),render(),update(),document.getElementsByClassName(`info`)[0].style.display="block",document.getElementById(`score`).innerHTML=`${stage.score}`,void(document.getElementById(`life`).innerHTML=`${stage.life}`)):(document.getElementById("keep-alive-canvas").style.display="none",void(document.getElementsByClassName(`gameOver`)[0].style.display="block"))}function init(){connection=new Connection(keepAliveCanvas.width/2,keepAliveCanvas.height-200,connectionRadius);let t=new Nodes(connection,window[`nodesConfig_${levelCounter}`]),e=new Obstacles(getObstacles(levelCounter));stage=new Stage(connection,t,e,stageSpeed,reverseSpeed),loop()}function keyDownHandler(t){39==t.keyCode?rightPressed=!0:37==t.keyCode&&(leftPressed=!0)}function keyUpHandler(t){39==t.keyCode?rightPressed=!1:37==t.keyCode&&(leftPressed=!1)}function start(t){document.getElementById("menu").style.display="none",document.getElementById("keep-alive-canvas").style.display="block",window.levelCounter=t,init()}function restart(){location.reload()}const W=window.innerWidth,H=window.innerHeight,connectionRadius=105;let nodeRadius=18;window.nodesConfig_1=[{color:"rgb(255,0,0)",radius:nodeRadius,angle:180},{color:"rgb(0,191,255)",radius:nodeRadius,angle:0}],window.nodesConfig_2=[{color:"rgb(0,191,255)",radius:nodeRadius,angle:0},{color:"rgb(255,0,0)",radius:nodeRadius,angle:180}],window.nodesConfig_3=[{color:"rgb(255,0,0)",radius:nodeRadius,angle:120},{color:"rgb(0,191,255)",radius:nodeRadius,angle:240},{color:"lawngreen",radius:nodeRadius,angle:360}];const stageSpeed=4,reverseSpeed=20;window.stage1obstacles=[[W/2-26.25,-60,52.5,30,"rgb(255,255,255)"],[W/2-262.5,-480,157.5,30,"rgb(255,255,255)"],[W/2-26.25,-480,52.5,30,"rgb(255,255,255)"],[W/2-262.5,-480,157.5,30,"rgb(255,255,255)"],[W/2+105,-0,157.5,30,"rgb(255,255,255)"],[W/2-31.5,-480,210,30,"rgb(255,255,255)"],[W/2-15,-480,30,210,"rgb(255,255,255)"],[W/2,-300,157.5,30,"rgb(255,255,255)"],[W/2,-300,157.5,30,"rgb(255,255,255)"],[W/2,-300,157.5,30,"rgb(255,255,255)"],[W/2,-300,157.5,30,"rgb(255,255,255)"],[W/2-157.5,-300,157.5,30,"rgb(255,255,255)"],[W/2-157.5,-300,157.5,30,"rgb(255,255,255)"],[W/2-157.5,-300,157.5,30,"rgb(255,255,255)"],[W/2-157.5,-300,157.5,30,"rgb(255,255,255)"],[W/2,-300,157.5,30,"rgb(255,255,255)"],[W/2-157.5,-300,157.5,30,"rgb(255,255,255)"],[W/2,-300,157.5,30,"rgb(255,255,255)"],[W/2-157.5,-300,157.5,30,"rgb(255,255,255)"],[W/2-105-30,-480,60,60,"rgb(255,255,255)"],[W/2+105-30,-0,60,60,"rgb(255,255,255)"],[W/2-30,-450,60,60,"rgb(255,255,255)"],[W/2-105-30,-450,60,60,"rgb(255,255,255)"],[W/2+105-30,-0,60,60,"rgb(255,255,255)"],[W/2-30,-450,60,60,"rgb(255,255,255)"],[W/2+50,-450,210,30,"rgb(255,255,255)"],[W/2-50-210,-0,210,30,"rgb(255,255,255)"],[W/2-25,-450,50,30,"rgb(255,255,255)"],[W/2+90,-0,200,30,"rgb(255,255,255)"],[W/2-60,-450,120,30,"rgb(255,255,255)"],[W/2+130,-0,175,30,"rgb(255,255,255)"],[W/2-25,-450,50,30,"rgb(255,255,255)"],[W/2+90,-0,200,30,"rgb(255,255,255)"],[W/2+50,-450,210,30,"rgb(255,255,255)"],[W/2-50-210,-0,210,30,"rgb(255,255,255)"],[W/2-25,-450,50,30,"rgb(255,255,255)"],[W/2-90-200,-0,200,30,"rgb(255,255,255)"],[W/2-60,-450,120,30,"rgb(255,255,255)"],[W/2-130-175,-0,175,30,"rgb(255,255,255)"],[W/2-25,-450,50,30,"rgb(255,255,255)"],[W/2-90-200,-0,200,30,"rgb(255,255,255)"],[W/2+50,-450,210,30,"rgb(255,255,255)"],[W/2-50-210,-0,210,30,"rgb(255,255,255)"]];const{PI:PI,sin:sin}=Math;window.stage2obstacles=[[W/2-210,60*-PI,160,30,"rgb(255,255,255)",{positionX:(t,e)=>t+100*Math.sin(e/60)}],[W/2-210,-2*PI*60,160,30,"rgb(255,255,255)",{positionX:(t,e)=>t+100*Math.sin(e/60+PI/3)}],[W/2+52,-2*PI*60,160,30,"rgb(255,255,255)",{positionX:(t,e)=>t+100*Math.sin(-e/60)}],[W/2+52,-2*PI*60,160,30,"rgb(255,255,255)",{positionX:(t,e)=>t+100*Math.sin(-(e/60+PI/3))}],[W/2-40,-2*PI*60,105,60,"rgb(255,255,255)",{positionX:(t,e)=>t+50*Math.sin(e/60),positionY:(t,e)=>t+50*Math.sin(e/60)}],[0,-2*PI*60,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(2*e+t).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(2*e+t+W/4).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(2*e+t+W/2).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(2*e+t+3*W/4).mod(W)}],[0,-2*PI*60,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(-2*e+t).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(-2*e+t+W/4).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(-2*e+t+W/2).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(-2*e+t+3*W/4).mod(W)}],[0,-2*PI*60,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(1.5*e+t).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(1.5*e+t+W/4).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(1.5*e+t+W/2).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(1.5*e+t+3*W/4).mod(W)}],[0,-2*PI*60,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(-1.5*e+t).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(-1.5*e+t+W/4).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(-1.5*e+t+W/2).mod(W)}],[0,0,30,30,"rgb(255,255,255)",{positionX:(t,e)=>(-1.5*e+t+3*W/4).mod(W)}]];let{sqrt:sqrt}=Math;window.stage3obstacles=[[W/2-26.25,-60,52.5,30,"rgb(255,0,0)"],[W/2-(157.5+105/sqrt(2)),-480,157.5,30,"rgb(0,191,255)"],[W/2-26.25,-480,52.5,30,"lawngreen"],[W/2-(157.5+105/sqrt(2)),-480,157.5,30,"rgb(0,191,255)"],[W/2+105*sqrt(2)/2,-0,157.5,30,"lawngreen"],[W/2+25,-540,210,30,"rgb(255,0,0)"],[W/2-15,-480,30,210,"rgb(255,0,0)"],[W/2,-360,157.5,30,"rgb(0,191,255)"],[W/2,-360,157.5,30,"lawngreen"],[W/2,-360,157.5,30,"rgb(255,0,0)"],[W/2,-360,157.5,30,"lawngreen"],[W/2-(52.5+105/sqrt(2)),-360,157.5,30,"rgb(255,0,0)"],[W/2-(52.5+105/sqrt(2)),-360,157.5,30,"lawngreen"],[W/2-(52.5+105/sqrt(2)),-360,157.5,30,"rgb(0,191,255)"],[W/2-(52.5+105/sqrt(2)),-360,157.5,30,"lawngreen"],[W/2,-360,157.5,30,"rgb(0,191,255)"],[W/2-(52.5+105/sqrt(2)),-360,157.5,30,"rgb(255,0,0)"],[W/2,-360,157.5,30,"rgb(0,191,255)"],[W/2-(52.5+105/sqrt(2)),-360,157.5,30,"rgb(255,0,0)"],[W/2-105-30,-540,60,60,"lawngreen"],[W/2+105-30,-0,60,60,"rgb(255,0,0)"],[W/2-30,-510,60,60,"rgb(0,191,255)"],[W/2-105-30,-510,60,60,"lawngreen"],[W/2+105-30,-0,60,60,"rgb(0,191,255)"],[W/2-30,-510,60,60,"lawngreen"],[W/2+50,-510,210,30,"rgb(0,191,255)"],[W/2-50-210,-0,210,30,"rgb(255,0,0)"],[W/2+50,-510,210,30,"lawngreen"],[W/2-50-210,-0,210,30,"rgb(255,0,0)"],[W/2+50,-510,210,30,"rgb(0,191,255)"],[W/2-50-210,-0,210,30,"lawngreen"]];const requiredKeys=["positionX","positionY","width","height","color"],identityTransformation=(t,e)=>t;window.getObstacles=(t=>{let e=window[`stage${t}obstacles`];let i=0;e.forEach(t=>i=t[1]=i+t[1]);e=e.map(t=>({positionX:t[0],positionY:t[1],width:t[2],height:t[3],color:t[4],transformations:t[5]||{}}));e.forEach(({transformations:transformations})=>requiredKeys.forEach(t=>transformations[t]=transformations[t]||identityTransformation));return e});class Connection{constructor(t,e,i){this.centerX=t,this.centerY=e,this.radius=i}render(){ctx.beginPath(),ctx.arc(this.centerX,this.centerY,this.radius,0,2*Math.PI,!1),ctx.closePath()}}class Node{constructor(t,e){this.connection=t;let{color:i,radius:n,angle:o}=e;this.angle=o,this.radius=n,this.color=i,this.newAngle=this.angle,this.dParticles=this.getDifferentParticles(),this.opacity=1,this.particles=[],this.points=[]}getDifferentParticles(){let t=[];for(let e=0;20>e;e++){let e=[4*Math.random(),4*Math.random()];Math.random()>.5&&(e[0]=-e[0]),Math.random()>.5&&(e[1]=-e[1]),t.push(e)}return t}get initialState(){return 1===this.opacity}destroy(){if(0>=this.opacity)return this.particles=[],void(this.opacity=1);if(!this.particles.length){let t=this.connection.centerX+this.connection.radius*Math.cos(this.newAngle*Math.PI/180),e=this.connection.centerY+this.connection.radius*Math.sin(this.newAngle*Math.PI/180);for(let i=0;20>i;i++)this.particles.push([t,e,this.radius/(3+3*Math.random())])}this.opacity+=-.05,ctx.fillStyle=this.color,ctx.beginPath();for(let t=0;20>t;t++)this.particles[t][0]+=this.dParticles[t][0],this.particles[t][1]+=this.dParticles[t][1],this.particles[t][2]+=-.02,ctx.arc(this.particles[t][0],this.particles[t][1],this.particles[t][2],0,2*Math.PI,!0),ctx.closePath();ctx.fill()}render(){ctx.save(),ctx.translate(this.connection.centerX,this.connection.centerY);let t=this.connection.radius*Math.cos(this.newAngle*Math.PI/180),e=this.connection.radius*Math.sin(this.newAngle*Math.PI/180);ctx.beginPath(),ctx.arc(t,e,this.radius,0,2*Math.PI),ctx.fillStyle=this.color,ctx.strokeStyle=this.color,ctx.stroke(),ctx.fill(),ctx.closePath(),ctx.globalAlpha=.3;let[i,n,o]=[t,e,15];this.points.unshift([i,n,o]),this.points=this.points.filter(t=>t[2]),this.points.forEach((t,e)=>{let i=t[0];let n=t[1];t[2]--;ctx.arc(i,n,this.radius-this.radius*e/this.points.length,0,2*Math.PI,!0);ctx.closePath()}),ctx.fill(),ctx.restore()}update(t){this.newAngle=this.angle+t}}class Nodes{constructor(t,e){this.data=e.map(e=>new Node(t,e))}render(){this.data.forEach(t=>{t.render()})}destroy(t){this.data.forEach((e,i)=>{t!=i&&e.render()}),this.data[t].destroy()}update(t){this.data.forEach(e=>e.update(t))}}class Obstacle{constructor(t){let{positionX:e,positionY:i,width:n,height:o,color:s,transformations:r}=t;this.baseState={positionX:e,positionY:i,width:n,height:o,color:s},this.transformations=r,this.update()}render(){ctx.beginPath(),ctx.rect(this.positionX,this.positionY,this.width,this.height),ctx.fillStyle=this.color,ctx.fill(),ctx.closePath()}update(t){for(let e in this.baseState)this[e]=this.transformations[e](this.baseState[e],t);this.positionY+=t}}class Obstacles{constructor(t,e,i){this.data=t.map(t=>new Obstacle(t))}render(t){for(let e=0;t>e;e++){const t=this.data[e];t.positionY>=-t.height&&t.positionY<keepAliveCanvas.height+t.height&&t.render()}}update(t,e){for(let i=0;t>i;i++)this.data[i].update(e)}}class Stage{constructor(t,e,i,n,o){this.connection=t,this.nodes=e,this.obstacles=i,this.nodeCollided=-1,this.obstacleCollided=-1,this.rotationShift=0,this.verticalShift=0,this.totalDistance=0,this.totalRotated=0,this.speed=n||4,this.reverseSpeed=o||20,this.timer=(new Date).getTime()/1e3,this.scoreCounter=0,this.lifeCounter=4}get startState(){return!this.verticalShift}get score(){return this.scoreCounter}get life(){return this.lifeCounter}get levelCompleted(){let t=this.obstacles.data[this.obstacles.data.length-1];return t.positionY>keepAliveCanvas.height+t.height}get collisionState(){return-1!==this.obstacleCollided&&-1!==this.nodeCollided}get revertState(){return-1!==this.obstacleCollided}getCircleRectHitStatus(t,e){return collisionDetection(this.connection.centerX+this.connection.radius*Math.cos(t.newAngle*Math.PI/180),this.connection.centerY+this.connection.radius*Math.sin(t.newAngle*Math.PI/180),t.radius,e.positionX,e.positionY,e.width,e.height)}detectCollision(t,e){for(let i=0;i<t.data.length;i++){const n=t.data[i];for(let t=0;t<e.data.length;t++){let o=e.data[t];if(o.color!=n.color){let e=this.getCircleRectHitStatus(o,n);if(e)return this.nodeCollided=t,void(this.obstacleCollided=i)}}}}get nodeReverseSpeed(){let t=this.totalDistance/this.reverseSpeed;return this.totalRotated/t}update(){if(this.startState&&(this.nodeCollided=-1,this.obstacleCollided=-1,this.scoreCounter=0,this.timer=(new Date).getTime()/1e3),this.revertState)this.collisionState&&(this.nodes.data[this.nodeCollided].initialState?this.nodeCollided=-1:(this.totalDistance=this.verticalShift,this.totalRotated=this.rotationShift)),this.verticalShift-=this.reverseSpeed,this.verticalShift>0||(this.lifeCounter--,this.verticalShift=0),this.rotationShift-=this.nodeReverseSpeed,this.nodes.update(this.rotationShift),this.obstacles.update(this.obstacleCollided+1,this.verticalShift);else{let t=(new Date).getTime()/1e3;t-this.timer>1&&(this.scoreCounter++,this.timer=t),this.verticalShift+=this.speed,this.obstacles.update(this.obstacles.data.length,this.verticalShift),this.detectCollision(this.obstacles,this.nodes)}}render(){ctx.lineWidth=3,ctx.strokeStyle="rgb(255, 255, 255)";for(let t=0;t<this.lifeCounter;t++)ctx.beginPath(),ctx.arc(this.connection.centerX,this.connection.centerY+30,(t+1)*this.connection.radius/8,-3*Math.PI/4,-Math.PI/4),ctx.stroke(),ctx.closePath();ctx.strokeStyle="rgb(255,0,0)";for(let t=this.lifeCounter;4>t;t++)ctx.beginPath(),ctx.arc(this.connection.centerX,this.connection.centerY+30,(t+1)*this.connection.radius/8,-3*Math.PI/4,-Math.PI/4),ctx.stroke(),ctx.closePath();this.revertState?(this.collisionState?this.nodes.destroy(this.nodeCollided):this.nodes.render(),this.obstacles.render(this.obstacleCollided+1)):(this.nodes.render(),this.obstacles.render(this.obstacles.data.length))}clockWise(){this.revertState||(this.rotationShift+=this.speed,this.nodes.update(this.rotationShift))}antiClockWise(){this.revertState||(this.rotationShift-=this.speed,this.nodes.update(this.rotationShift))}}let connection=null,stage=null,rightPressed=!1,leftPressed=!1,totalLevels=3;document.addEventListener("keydown",keyDownHandler,!1),document.addEventListener("keyup",keyUpHandler,!1),window.keepAliveCanvas=document.getElementById("keep-alive-canvas"),window.ctx=keepAliveCanvas.getContext("2d"),window.keepAliveCanvas.width=W,window.keepAliveCanvas.height=H;
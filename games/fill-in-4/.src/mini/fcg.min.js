var HEIGHT=550;var WIDTH=600;var DEFAULT_COLOR=["#FFFFFF","#FF0000","#00FF00","#0000FF","#FFFF00"];function getElmt(a){return document.getElementById(a)}function FCG(){this.cdom=getElmt("myfcg");this.ctx=this.cdom.getContext("2d");this.currentLevel=0}FCG.prototype.line=function(b,d,a,c){this.ctx.moveTo(b,d);this.ctx.lineTo(a,c);this.ctx.lineWidth=1;this.ctx.strokeStyle="#bbb";this.ctx.stroke()};FCG.prototype.drawLines=function(b){var a;for(var c=0;c<b.length;c++){a=b[c];this.line(a[0],a[1],a[2],a[3]);console.log("line",c+", "+a)}};FCG.prototype.setColor=function(a){this.currentColor=a};FCG.prototype.fillPart=function(a){var b=LEVEL[this.currentLevel].parts;this.ctx.fillStyle=DEFAULT_COLOR[this.currentColor];console.log("parts "+a,b[a]);this.ctx.fillRect(b[a][0]+1,b[a][1]+1,b[a][2]-1,b[a][3]-1);this.partsColor[a]=this.currentColor};FCG.prototype.fillBackground=function(){this.ctx.fillStyle=DEFAULT_COLOR[0];this.ctx.fillRect(0,0,WIDTH,HEIGHT)},FCG.prototype.setLevelText=function(){var a=getElmt("level");a.innerHTML=this.currentLevel+1};FCG.prototype.initPartsColor=function(){var b=LEVEL[this.currentLevel].parts;this.partsColor=new Array();for(var a=0;a<b.length;a++){this.partsColor[a]=0}};FCG.prototype.start=function(){var b=LEVEL[this.currentLevel];this.currentColor=0;this.fillBackground();this.setLevelText();this.initPartsColor();this.drawLines(b.lines);for(var a=0;a<this.partsColor.length;a++){this.fillPart(a)}};FCG.prototype.next=function(){var a=LEVEL.length-1;if(a==this.currentLevel){this.currentLevel=0;this.win()}else{if(a>this.currentLevel){this.currentLevel++;this.start()}}};FCG.prototype.win=function(){alert("You are the winner");this.start()};FCG.prototype.validate=function(){var d=true;var c=LEVEL[this.currentLevel].neighbours;for(var b=0;b<this.partsColor.length;b++){if(this.partsColor[b]==0){d=false;break}}if(d){for(var b=0;b<c.length;b++){for(var a=0;a<c[b].length;a++){if((c[b][a]==1)&&(this.partsColor[b]==this.partsColor[a])){d=false;console.log("break: i,j",b+","+a);console.log("partsColor: i,j",this.partsColor[b]+","+this.partsColor[b]);break}}if(!d){break}}}return d};FCG.prototype.calculatePosition=function(b){console.log("event",b);var a=b.clientX;var c=b.clientY;console.log("original click",a+","+c);console.log("offsetLeft",this.cdom.offsetLeft);console.log("offsetTop",this.cdom.offsetTop);a=a-this.cdom.offsetLeft+window.scrollX;c=c-this.cdom.offsetTop+window.scrollY;return[a,c]};FCG.prototype.getPartByPoint=function(b){var a=-1;var e=LEVEL[this.currentLevel].parts;var c;for(var d=0;d<e.length;d++){c=new Rect(e[d][0],e[d][1],e[d][0]+e[d][2],e[d][1]+e[d][3]);if(c.isInside(b[0],b[1])){a=d;break}}return a};function Rect(b,d,a,c){this.x1=b;this.y1=d;this.x2=a;this.y2=c}Rect.prototype.isInside=function(a,b){return a>=this.x1&&a<=this.x2&&b>=this.y1&&b<=this.y2};function startGame(){var c=getElmt("validate");var d=getElmt("reset");var f=getElmt("red");var e=getElmt("green");var a=getElmt("blue");var g=getElmt("yellow");var b=getElmt("help");fcg=new FCG();fcg.start();f.addEventListener("click",function(){fcg.currentColor=1});e.addEventListener("click",function(){fcg.currentColor=2});a.addEventListener("click",function(){fcg.currentColor=3});g.addEventListener("click",function(){fcg.currentColor=4});c.addEventListener("click",function(){valid=fcg.validate();console.log("valid",valid);if(valid){fcg.next()}else{alert("Bad Luck.\nAll parts must be filled with no default color.\nDirectly connected parts must be filled with different color.")}});d.addEventListener("click",function(){var h=confirm("Are you sure out of luck?");if(h==true){fcg.start()}});b.addEventListener("click",function(){var h="Rule of play		\n\nFill all square (at the left side) with any color from the list (at the right side)		\nYou must fill all square and make sure no directly connected parts have same color		\n\nTo fill a square with specific color, choose the color by clicking color list (at the right side)		\nand then click specific part do you want to color.		\n\nGood Luck";alert(h)});fcg.cdom.addEventListener("mousedown",function(j){var h=fcg.calculatePosition(j);console.log("Calibrated position",h[0]+","+h[1]);var i=fcg.getPartByPoint(h);console.log("click in area",i);fcg.fillPart(i)},false)}var LEVEL=[{lines:[[0,HEIGHT/2,WIDTH,HEIGHT/2],[WIDTH/2,0,WIDTH/2,HEIGHT]],parts:[[0,0,WIDTH/2,HEIGHT/2],[WIDTH/2,0,WIDTH/2,HEIGHT/2],[0,HEIGHT/2,WIDTH/2,HEIGHT/2],[WIDTH/2,HEIGHT/2,WIDTH/2,HEIGHT/2]],neighbours:[[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]]},{lines:[[0,HEIGHT/2,WIDTH,HEIGHT/2],[WIDTH/2,0,WIDTH/2,HEIGHT],[0,HEIGHT/4,WIDTH/2,HEIGHT/4],[WIDTH/4,0,WIDTH/4,HEIGHT/2]],parts:[[0,0,WIDTH/4,HEIGHT/4],[WIDTH/4,0,WIDTH/4,HEIGHT/4],[0,HEIGHT/4,WIDTH/4,HEIGHT/4],[WIDTH/4,HEIGHT/4,WIDTH/4,HEIGHT/4],[WIDTH/2,0,WIDTH/2,HEIGHT/2],[0,HEIGHT/2,WIDTH/2,HEIGHT/2],[WIDTH/2,HEIGHT/2,WIDTH/2,HEIGHT/2]],neighbours:[[0,1,1,1,0,0,0],[1,0,1,1,1,0,0],[1,1,0,1,0,1,0],[1,1,1,0,1,1,1],[0,1,0,1,0,1,1],[0,0,1,1,1,0,1],[0,0,0,1,1,1,0]]},{lines:[[0,HEIGHT/2,WIDTH,HEIGHT/2],[WIDTH/2,0,WIDTH/2,HEIGHT],[0,HEIGHT/4,WIDTH/2,HEIGHT/4],[WIDTH/4,0,WIDTH/4,HEIGHT/2],[WIDTH/2,3*HEIGHT/4,WIDTH,3*HEIGHT/4],[3*WIDTH/4,HEIGHT/2,3*WIDTH/4,HEIGHT]],parts:[[0,0,WIDTH/4,HEIGHT/4],[WIDTH/4,0,WIDTH/4,HEIGHT/4],[0,HEIGHT/4,WIDTH/4,HEIGHT/4],[WIDTH/4,HEIGHT/4,WIDTH/4,HEIGHT/4],[WIDTH/2,0,WIDTH/2,HEIGHT/2],[0,HEIGHT/2,WIDTH/2,HEIGHT/2],[WIDTH/2,HEIGHT/2,WIDTH/4,HEIGHT/4],[3*WIDTH/4,HEIGHT/2,WIDTH/4,HEIGHT/4],[WIDTH/2,3*HEIGHT/4,WIDTH/4,HEIGHT/4],[3*WIDTH/4,3*HEIGHT/4,WIDTH/4,HEIGHT/4]],neighbours:[[0,1,1,1,0,0,0,0,0,0],[1,0,1,1,1,0,0,0,0,0],[1,1,0,1,0,1,0,0,0,0],[1,1,1,0,1,1,1,0,0,0],[0,1,0,1,0,1,1,1,0,0],[0,0,1,1,1,0,1,0,1,0],[0,0,0,1,1,1,0,1,1,1],[0,0,0,0,1,0,1,0,1,1],[0,0,0,0,0,1,1,1,0,1],[0,0,0,0,0,0,1,1,1,0]]},{lines:[[0,HEIGHT/3,WIDTH,HEIGHT/3],[0,2*HEIGHT/3,WIDTH,2*HEIGHT/3],[WIDTH/3,0,WIDTH/3,HEIGHT],[2*WIDTH/3,0,2*WIDTH/3,HEIGHT]],parts:[[0,0,WIDTH/3,HEIGHT/3],[WIDTH/3,0,WIDTH/3,HEIGHT/3],[2*WIDTH/3,0,WIDTH/3,HEIGHT/3],[0,HEIGHT/3,WIDTH/3,HEIGHT/3],[WIDTH/3,HEIGHT/3,WIDTH/3,HEIGHT/3],[2*WIDTH/3,HEIGHT/3,WIDTH/3,HEIGHT/3],[0,2*HEIGHT/3,WIDTH/3,HEIGHT/3],[WIDTH/3,2*HEIGHT/3,WIDTH/3,HEIGHT/3],[2*WIDTH/3,2*HEIGHT/3,WIDTH/3,HEIGHT/3]],neighbours:[[0,1,0,1,1,0,0,0,0],[1,0,1,1,1,1,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,0,0,1,0,1,1,0],[1,1,1,1,0,1,1,1,1],[0,1,1,0,1,0,0,1,1],[0,0,0,1,1,0,0,1,0],[0,0,0,1,1,1,1,0,1],[0,0,0,0,1,1,0,1,0]]},{lines:[[0,HEIGHT/4,WIDTH,HEIGHT/4],[WIDTH/4,0,WIDTH/4,HEIGHT],[0,3*HEIGHT/4,WIDTH,3*HEIGHT/4],[3*WIDTH/4,0,3*WIDTH/4,HEIGHT],[0,HEIGHT/2,WIDTH/4,HEIGHT/2],[WIDTH/2,0,WIDTH/2,HEIGHT/4],[3*WIDTH/4,HEIGHT/2,WIDTH,HEIGHT/2],[WIDTH/2,3*HEIGHT/4,WIDTH/2,HEIGHT]],parts:[[0,0,WIDTH/4,HEIGHT/4],[WIDTH/4,0,WIDTH/4,HEIGHT/4],[WIDTH/2,0,WIDTH/4,HEIGHT/4],[3*WIDTH/4,0,WIDTH/4,HEIGHT/4],[0,HEIGHT/4,WIDTH/4,HEIGHT/4],[WIDTH/4,HEIGHT/4,WIDTH/2,HEIGHT/2],[3*WIDTH/4,HEIGHT/4,WIDTH/4,HEIGHT/4],[0,HEIGHT/2,WIDTH/4,HEIGHT/4],[3*WIDTH/4,HEIGHT/2,WIDTH/4,HEIGHT/4],[0,3*HEIGHT/4,WIDTH/4,HEIGHT/4],[WIDTH/4,3*HEIGHT/4,WIDTH/4,HEIGHT/4],[WIDTH/2,3*HEIGHT/4,WIDTH/4,HEIGHT/4],[3*WIDTH/4,3*HEIGHT/4,WIDTH/4,HEIGHT/4]],neighbours:[[0,1,0,0,1,1,0,0,0,0,0,0,0],[1,0,1,0,1,1,0,0,0,0,0,0,0],[0,1,0,1,0,1,1,0,0,0,0,0,0],[0,0,1,0,0,1,1,0,0,0,0,0,0],[1,1,0,0,0,1,0,1,0,0,0,0,0],[1,1,1,1,1,0,1,1,1,1,1,1,1],[0,0,1,1,0,1,0,0,1,0,0,0,0],[0,0,0,0,1,1,0,0,0,1,1,0,0],[0,0,0,0,0,1,1,0,0,0,0,1,1],[0,0,0,0,0,1,0,1,0,0,1,0,0],[0,0,0,0,0,1,0,1,0,1,0,1,0],[0,0,0,0,0,1,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1,0,0,1,0]]}];
!function(t,o){"use strict";"function"==typeof define&&define.amd?define(o):"object"==typeof exports?module.exports=o():t.SAT=o()}(this,(function(){"use strict";var t={};function o(t,o){this.x=t||0,this.y=o||0}function e(t,e){this.pos=t||new o,this.angle=0,this.offset=new o,this.setPoints(e||[])}function n(t,e,n){this.pos=t||new o,this.w=e||0,this.h=n||0}function r(){this.a=null,this.b=null,this.overlapN=new o,this.overlapV=new o,this.clear()}t.Vector=o,t.V=o,o.prototype.copy=o.prototype.copy=function(t){return this.x=t.x,this.y=t.y,this},o.prototype.clone=o.prototype.clone=function(){return new o(this.x,this.y)},o.prototype.perp=o.prototype.perp=function(){var t=this.x;return this.x=this.y,this.y=-t,this},o.prototype.rotate=o.prototype.rotate=function(t){var o=this.x,e=this.y;return this.x=o*Math.cos(t)-e*Math.sin(t),this.y=o*Math.sin(t)+e*Math.cos(t),this},o.prototype.reverse=o.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},o.prototype.normalize=o.prototype.normalize=function(){var t=this.len();return t>0&&(this.x=this.x/t,this.y=this.y/t),this},o.prototype.add=o.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},o.prototype.sub=o.prototype.sub=function(t){return this.x-=t.x,this.y-=t.y,this},o.prototype.dot=o.prototype.dot=function(t){return this.x*t.x+this.y*t.y},o.prototype.len2=o.prototype.len2=function(){return this.dot(this)},o.prototype.len=o.prototype.len=function(){return Math.sqrt(this.len2())},t.Polygon=e,e.prototype.setPoints=e.prototype.setPoints=function(t){if(!this.points||this.points.length!==t.length){var e,n=this.calcPoints=[],r=this.edges=[],s=this.normals=[];for(e=0;e<t.length;e++)n.push(new o),r.push(new o),s.push(new o)}return this.points=t,this._recalc(),this},e.prototype.setAngle=e.prototype.setAngle=function(t){return this.angle=t,this._recalc(),this},e.prototype.setOffset=e.prototype.setOffset=function(t){return this.offset=t,this._recalc(),this},e.prototype.rotate=e.prototype.rotate=function(t){for(var o=this.points,e=o.length,n=0;n<e;n++)o[n].rotate(t);return this._recalc(),this},e.prototype.translate=e.prototype.translate=function(t,o){for(var e=this.points,n=e.length,r=0;r<n;r++)e[r].x+=t,e[r].y+=o;return this._recalc(),this},e.prototype._recalc=function(){var t,o=this.calcPoints,e=this.edges,n=this.normals,r=this.points,s=this.offset,i=this.angle,p=r.length;for(t=0;t<p;t++){var h=o[t].copy(r[t]);h.x+=s.x,h.y+=s.y,0!==i&&h.rotate(i)}for(t=0;t<p;t++){var a=o[t],y=t<p-1?o[t+1]:o[0],u=e[t].copy(y).sub(a);n[t].copy(u).perp().normalize()}return this},e.prototype.getAABB=e.prototype.getAABB=function(){for(var t=this.calcPoints,e=t.length,r=t[0].x,s=t[0].y,i=t[0].x,p=t[0].y,h=1;h<e;h++){var a=t[h];a.x<r?r=a.x:a.x>i&&(i=a.x),a.y<s?s=a.y:a.y>p&&(p=a.y)}return new n(this.pos.clone().add(new o(r,s)),i-r,p-s).toPolygon()},t.Box=n,n.prototype.toPolygon=n.prototype.toPolygon=function(){var t=this.pos,n=this.w,r=this.h;return new e(new o(t.x,t.y),[new o,new o(n,0),new o(n,r),new o(0,r)])},t.Response=r,r.prototype.clear=r.prototype.clear=function(){return this.aInB=!0,this.bInA=!0,this.overlap=Number.MAX_VALUE,this};for(var s=[],i=0;i<10;i++)s.push(new o);var p=[];for(i=0;i<5;i++)p.push([]);new r,new n(new o,1e-6,1e-6).toPolygon();function h(t,o,e){for(var n=Number.MAX_VALUE,r=-Number.MAX_VALUE,s=t.length,i=0;i<s;i++){var p=t[i].dot(o);p<n&&(n=p),p>r&&(r=p)}e[0]=n,e[1]=r}function a(t,o,e,n,r,i){var a=p.pop(),y=p.pop(),u=s.pop().copy(o).sub(t),c=u.dot(r);if(h(e,r,a),h(n,r,y),y[0]+=c,y[1]+=c,a[0]>y[1]||y[0]>a[1])return s.push(u),p.push(a),p.push(y),!0;if(i){var l,f,v=0;if(a[0]<y[0])if(i.aInB=!1,a[1]<y[1])v=a[1]-y[0],i.bInA=!1;else v=(l=a[1]-y[0])<(f=y[1]-a[0])?l:-f;else if(i.bInA=!1,a[1]>y[1])v=a[0]-y[1],i.aInB=!1;else v=(l=a[1]-y[0])<(f=y[1]-a[0])?l:-f;var x=Math.abs(v);x<i.overlap&&(i.overlap=x,i.overlapN.copy(r),v<0&&i.overlapN.reverse())}return s.push(u),p.push(a),p.push(y),!1}return t.isSeparatingAxis=a,t.testPolygonPolygon=function(t,o,e){for(var n=t.calcPoints,r=n.length,s=o.calcPoints,i=s.length,p=0;p<r;p++)if(a(t.pos,o.pos,n,s,t.normals[p],e))return!1;for(p=0;p<i;p++)if(a(t.pos,o.pos,n,s,o.normals[p],e))return!1;return e&&(e.a=t,e.b=o,e.overlapV.copy(e.overlapN).scale(e.overlap)),!0},t}));
"use strict";function Game(t,e){this.id="game"+Math.random(),games[this.id]=this,this.players=[t,e],log("Start game",{id:this.id,players:this.players}),t.joinGame(this),t.emitReady({id:this.id,teamNumber:1,playAgainstAI:!1}),e.joinGame(this),e.emitReady({id:this.id,teamNumber:0,playAgainstAI:!1}),this.player1Step=null,this.player2Step=null,this.player1Sync=null,this.player2Sync=null}function Player(t){this.socket=t,this.team={},t.on("disconnect",this.onExit.bind(this)),t.on("clientsync",this.onClientSync.bind(this)),t.on("step",this.onStep.bind(this)),t.on("quit",this.onExit.bind(this))}var io=require("sandbox-io"),firstPlayer=null,games={},records=db("records")||{};Game.prototype.step=function(t,e){t==this.players[0]?this.player1Step=e:this.player2Step=e,this.player1Step&&this.player2Step&&(this.players[0].respond(this.player1Step,this.player2Step),this.players[1].respond(this.player2Step,this.player1Step),this.player1Step=null,this.player2Step=null)},Game.prototype.sync=function(t,e){t==this.players[0]?this.player1Sync=e:this.player2Sync=e,this.player1Sync&&this.player2Sync&&(this.players[0].sync(this.player1Sync,this.player2Sync),this.players[1].sync(this.player2Sync,this.player1Sync),this.player1Sync=null,this.player2Sync=null)},Game.prototype.end=function(){log("End game",{id:this.id,players:this.players}),this.players[0].exit(),this.players[1].exit(),delete games[this.id]},Player.prototype.onStep=function(t){log("Step "+JSON.stringify(t)),this.game.step(this,t.a)},Player.prototype.respond=function(t,e){this.socket.emit("response",{a:t,b:e})},Player.prototype.onClientSync=function(t){log("Client sync"),this.game.sync(this,t.a)},Player.prototype.sync=function(t,e){this.socket.emit("sync",{a:t,b:e})},Player.prototype.joinGame=function(t){this.game=t,this.socket.join(t.id)},Player.prototype.onExit=function(){this==firstPlayer&&(log("First player couldn't find someone, just left"),firstPlayer=null),this.game&&this.game.end("A Player left the game")},Player.prototype.exit=function(t){this.game&&(this.socket.emit("gameover",t),this.socket.disconnect(),this.game=null)},Player.prototype.emitReady=function(t){this.socket.emit("ready",t)},io.on("connection",function(t){log("Connection happend, yay!");var e=new Player(t);if(firstPlayer){log("Second player");var i=firstPlayer,s=e;firstPlayer=null,setTimeout(function(){new Game(i,s)},500)}else log("First player"),firstPlayer=e});
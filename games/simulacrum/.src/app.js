function main(incrementYear){isDone=!1,document.getElementById("resultBtn").style="visibility: hidden",daysLeft=15;var oldBffName=null;bestFriend&&(oldBffName=bestFriend.name),!0!==incrementYear?bestFriend=generateBestFriend():(++year>4?bestFriend=generateBestFriend():((bestFriend=SnailUtil.getBestAttempt()).isBestFriend=!0,bestFriend.isBestAttempt=!1),bestFriend.unlockNextGene()),bestFriend.posX=10,bestFriend.posY=35,eligibleSnails=[],immatureSnails=[],deadSnails=[],generateEligibleBreedingPool(),menu=new MenuUI(bestFriend.name,oldBffName),window.onload=draw()}function generateEligibleBreedingPool(){for(var snailPosX=ui.breedingPoolBlock.posX,snailPosY=ui.breedingPoolBlock.posY+25,i=0;3>i;i++){var snail=generateRandomSnail();snail.posX=snailPosX,snail.posY=snailPosY,SnailUtil.positionNewSnail(snail),eligibleSnails.push(snail)}1===year&&adjustDifficulty(),SnailUtil.getClosestSnailToBFF()}function adjustDifficulty(){for(var missingAlleles=[bestFriend.genes[0].allele1,bestFriend.genes[0].allele2],i=0;eligibleSnails.length>i;i++){var snail=eligibleSnails[i],idx1=missingAlleles.indexOf(snail.genes[0].allele1),idx2=missingAlleles.indexOf(snail.genes[0].allele2);idx1>-1&&missingAlleles.splice(idx1,1),idx2>-1&&missingAlleles.splice(idx2,1)}for(var iter=0;missingAlleles.length>0&&10>iter;){var allele=missingAlleles[0],rand=MathUtil.getRandomInt(0,eligibleSnails.length-1),snail=eligibleSnails[rand],newGene=Util.deepCopyObj(snail.genes[0]),oldGene=Util.deepCopyObj(snail.genes[0]);newGene.allele1=allele,snail.genes[0]=newGene,snail.getTraitsInCommonWithBff(),0===snail.proximityToBestFriend?missingAlleles.splice(0,1):(snail.genes[0]=oldGene,snail.getTraitsInCommonWithBff()),iter++}missingAlleles.length>0&&iter>=10&&main()}function generateBestFriend(){bestFriend=generateRandomSnail();var generator=new RandomSnailGenerator;if(1===year)for(var shellColorGene=bestFriend.findGene("Shell Color"),dom=GeneUtil.getDominantAllele(shellColorGene);dom===ColorAllele.Red;)bestFriend.genes=[],generator.generateShellColor(bestFriend),shellColorGene=bestFriend.findGene("Shell Color"),dom=GeneUtil.getDominantAllele(shellColorGene);return bestFriend.isBestFriend=!0,bestFriend.name=generator.generateSnailName(),bestFriend}function generateRandomSnail(){return(new RandomSnailGenerator).generateRandomSnail()}function drawDayFade(){0>(globalAlpha-=fadeInterval)?(fadeInterval*=-1,globalAlpha=0):globalAlpha>1&&(fading=!1,globalAlpha=1,fadeInterval*=-1),ctx.save(),ctx.globalAlpha=globalAlpha,daysLeft>0?SnailUtil.getBestAttempt().proximityToBestFriend===bestFriend.genes.length?drawResult():draw():fading||drawResult(),ctx.fillStyle="rgba(0, 0, 0, "+globalAlpha+")",ctx.restore(),fading&&requestAnimationFrame(drawDayFade)}function draw(){for(ctx.clearRect(0,0,canvasWidth,canvasHeight),ctx.fillRect(0,0,canvasWidth,canvasHeight),ui.draw(),bestFriend.draw(),bestFriend.img.onload=bestFriend.draw.bind(bestFriend),i=0;eligibleSnails.length>i;i++)(snail=eligibleSnails[i]).draw(),snail.img.onload=snail.draw.bind(snail);for(i=0;immatureSnails.length>i;i++)(snail=immatureSnails[i]).draw(),snail.img.onload=snail.draw.bind(snail);for(var i=0;deadSnails.length>i;i++){var snail=deadSnails[i];snail.draw(),snail.img.onload=snail.draw.bind(snail)}}function drawResult(){isDone=!0,ctx.clearRect(0,0,canvasWidth,canvasHeight),ctx.fillRect(0,0,canvasWidth,canvasHeight);var bestAttempt=SnailUtil.getBestAttempt();bestFriend.posX=canvas.width/2-220,bestFriend.posY=100,bestAttempt.posX=canvas.width/2+10,bestAttempt.posY=100;var resultBtn=document.getElementById("resultBtn");bestFriend.genes.length>bestAttempt.proximityToBestFriend?(resultBtn.onClick="main()",resultBtn.innerHTML="Try again",ui.drawFailResult(bestFriend,bestAttempt)):ui.drawWinResult(bestFriend,bestAttempt),resultBtn.style="visibility: visible"}function incrementDay(){daysLeft--;for(var allSnails=SnailUtil.getAllLiveSnails(),i=0;allSnails.length>i;i++){var snail=allSnails[i];snail.ageSnail(),snail.sexualOrientation>0?snail.sexualOrientation-=25:0>snail.sexualOrientation&&(snail.sexualOrientation+=25)}ui.hideSelectedSnailDetails(),SnailUtil.refreshSnailGrid(),SnailUtil.getClosestSnailToBFF(),fading=!0,drawDayFade()}class MenuUI{constructor(bestFriendName,oldName){oldName||(oldName="\\[bffname\\]"),(this.instructionDiv=document.getElementById("instructions")).innerHTML=Util.replaceAll(this.instructionDiv.innerHTML,oldName,bestFriendName)}}class GameplayUI{constructor(){this.targetBlock={text:"Your Target:",posX:10,posY:10},this.daysLeftBlock={text:"Days Left:",posX:355,posY:10},this.bestAttemptBlock={text:"Your Best Effort:",posX:700,posY:10},this.breedingPoolBlock={text:"Eligible Breeding Pool:",posX:10,posY:120,gridCols:3,gridRows:3},this.bestAttemptText="Your Best Effort:",this.breedingPoolText="Eligible Breeding Pool:"}hideSelectedSnailDetails(){document.getElementById("snailDetails").style="visibility: hidden",document.getElementById("selectedSnailDetails").style="visibility:hidden",document.getElementById("selectedSnailGenes").style="visibility: hidden",document.getElementById("breedSnailSection").style="visibility: hidden"}draw(){ctx.save(),ctx.font="25px Arial",ctx.fillStyle="green",ctx.textBaseline="top",ctx.fillText(this.targetBlock.text,this.targetBlock.posX,this.targetBlock.posY),ctx.fillText(this.daysLeftBlock.text,this.daysLeftBlock.posX,this.daysLeftBlock.posY),ctx.fillText(this.bestAttemptBlock.text,this.bestAttemptBlock.posX,this.bestAttemptBlock.posY),ctx.fillText(this.breedingPoolBlock.text,this.breedingPoolBlock.posX,this.breedingPoolBlock.posY),ctx.save(),ctx.textBaseline="bottom",ctx.fillText("Year: "+year,10,canvas.height-10),ctx.restore(),ctx.font="60px Arial",ctx.textAlign="center",ctx.fillText(daysLeft,this.daysLeftBlock.posX+55,this.daysLeftBlock.posY+30),ctx.restore()}drawFailResult(bestFriend,bestAttempt){bestFriend.draw(),bestAttempt.draw(),ctx.save(),ctx.font="60px Arial",ctx.fillStyle="green",ctx.textBaseline="top",ctx.textAlign="center",ctx.fillText("Time's up!",canvasWidth/2,20),ctx.font="20px Arial",ctx.textAlign="left";var y=bestFriend.posY+120,generationLabel="wild snail";for(bestAttempt.generation>1&&(generationLabel=bestAttempt.generation+"nd generation offspring"),i=0;bestAttempt.traitsInCommonWithBff.length>i;i++);for(var lines=["Summer is over and with it the breeding season.","- Your best attempt to breed a snail like "+bestFriend.name+" is "+bestAttempt.name+".","- "+bestAttempt.name+" is a "+generationLabel+"."],i=0;lines.length>i;i++){var line=lines[i];ctx.fillText(line,50,y),y+=23}ctx.restore()}drawWinResult(bestFriend,bestAttempt){bestFriend.draw(),bestAttempt.draw(),ctx.save(),ctx.font="60px Arial",ctx.fillStyle="green",ctx.textBaseline="top",ctx.textAlign="center",ctx.fillText("You did it!",canvasWidth/2,20),ctx.font="20px Arial",ctx.textAlign="left";var y=bestFriend.posY+120,generationLabel="wild snail";bestAttempt.generation>1&&(generationLabel=bestAttempt.generation+"nd generation offspring");for(var i=0;bestAttempt.traitsInCommonWithBff.length>i;i++);var lines=["You did it! You bred a snail whose traits perfectly match your best friend.","- "+bestAttempt.name+" is a "+generationLabel+".",""];for(4>year&&lines.push("You seem to have discovered more traits! Maybe you should keep living..."),i=0;lines.length>i;i++){var line=lines[i];ctx.fillText(line,50,y),y+=23}ctx.restore()}showSnailDetails(snail){document.getElementById("snailDetails").style="visibility: visible",document.getElementById("selectedSnailName").innerHTML=snail.name,snail!==bestFriend?this.displayDetailsSection(snail):document.getElementById("selectedSnailDetails").style="visibility: hidden",this.displayGeneSection(snail),snail!==bestFriend?this.displayBreedingSection(snail):document.getElementById("breedSnailSection").style="visibility: hidden"}displayGeneSection(snail){var geneSection=document.getElementById("selectedSnailGenes");geneSection.style="visibility: visible";var inner="<h3>Genes</h3>";inner+="<p>Color gene dominance: R > G > B<br />",inner+="Shape gene dominance: S > C > SC > B</p>",inner+="<table><tr><th>Name</th><th>Allele 1</th><th>Allele 2</th></tr>";for(var i=0;snail.genes.length>i;i++){var gene=snail.genes[i];inner+=this.buildGeneRow(gene)}inner+="</table>",geneSection.innerHTML=inner}buildGeneRow(gene){var dominantAllele=GeneUtil.getDominantAllele(gene),inner="<tr><td>"+gene.name+"</td><td>";return inner+=dominantAllele===gene.allele1?"<strong>"+gene.allele1+"</strong>":gene.allele1,inner+="</td>",inner+="<td>",inner+=dominantAllele===gene.allele2?"<strong>"+gene.allele2+"</strong>":gene.allele2,inner+="</td></tr>"}displayDetailsSection(snail){var details=document.getElementById("selectedSnailDetails");if(details.style="visibility: visible",details.innerHTML="<ul>",details.innerHTML+="<li><strong>Age:</strong> "+snail.age+" days</li>",snail.age>0){details.innerHTML+="<li><strong>Proximity to "+bestFriend.name+": </strong>"+snail.proximityToBestFriend+"/"+snail.maxPoints+"</li>",details.innerHTML+="<li><strong>Traits in common:</strong> ";for(var i=0;snail.traitsInCommonWithBff.length>i;i++){var trait=snail.traitsInCommonWithBff[i];details.innerHTML+=trait,snail.traitsInCommonWithBff.length-1>i&&(details.innerHTML+=", ")}details.innerHTML+="</li>",details.innerHTML+="<li><strong>Orientation:</strong>"+snail.sexualOrientationDesc+"</li>"}details.innerHTML+="<li><strong>Stag:</strong> "+snail.stagName+"</li>",details.innerHTML+="<li><strong>Doe:</strong> "+snail.doeName+"</li>",details.innerHTML+="</ul>"}displayBreedingSection(snail){var breedSection=document.getElementById("breedSnailSection");if(snail.age>0){breedSection.style="visibility: visible";var mateSelection=document.getElementById("breedSnailSelect");mateSelection.innerHTML="";for(var i=0;eligibleSnails.length>i;i++){var otherSnail=eligibleSnails[i];snail.name!==otherSnail.name&&snail.age>0&&(mateSelection.innerHTML+="<option value='"+otherSnail.name+"'>"+otherSnail.name+"</option>")}}else breedSection.style="visibility: hidden"}hideBreedingPreviewChart(){document.getElementById("breedingPreview").style="visibility: hidden"}displayBreedingPreviewChart(name1,name2,geneCombos){var breedingPreview=document.getElementById("breedingPreview");breedingPreview.style="visibility: visible";var inner="<table>";inner+="<th colspan=3><p>"+name1+" x "+name2+" BREEDING PREVIEW</p></th>";for(var i=0;geneCombos.length>i;i++){var geneCombo=geneCombos[i];inner+="<tr>",inner+="<td colspan=3><strong>"+geneCombo[0].name+" possibilities</strong></td></tr>",inner+="<tr><td></td><td>"+geneCombo[0].allele2+"</td>",inner+="<td>"+geneCombo[1].allele2+"</td></tr>";for(var n=0;geneCombo.length>n;n++){var gene=geneCombo[n];0===n?inner+="<tr><td>"+gene.allele1+"</td>":2===n&&(inner+="</tr><tr><td>"+gene.allele1+"</td>"),inner+="<td>"+gene.allele1+gene.allele2+"</td>",n===geneCombo.length-1&&(inner+="</tr>")}}inner+="</table><br />";var closeBtn=document.createElement("BUTTON"),label=document.createTextNode("Close");closeBtn.appendChild(label),closeBtn.onclick=this.hideBreedingPreviewChart,breedingPreview.innerHTML=inner,breedingPreview.appendChild(closeBtn)}}var PatternType={SOLID:"S",CHERRY:"C",SQUARECHERRY:"Sc",BLOTCHY:"B"},ColorAllele={Red:"R",Green:"G",Blue:"B"},CauseOfDeath={TooOld:"too old",TooYoung:"too young"};class SnailUtil{static getSelectedSnail(){for(var detailSnailName=document.getElementById("selectedSnailName").innerText,i=0;eligibleSnails.length>i;i++){var snail=eligibleSnails[i];if(snail.name==detailSnailName)return snail}if(bestFriend&&detailSnailName===bestFriend.name)return bestFriend}static getSnailByName(name){for(var i=0;eligibleSnails.length>i;i++){var snail=eligibleSnails[i];if(snail.name===name)return snail}}static getBestAttempt(){for(var allSnails=SnailUtil.getAllLiveSnails(),i=0;allSnails.length>i;i++){var snail=allSnails[i];if(snail.isBestAttempt)return snail}return null}static previewBreeding(){try{for(var selectedSnail=SnailUtil.getSelectedSnail(),select=document.getElementById("breedSnailSelect"),mateName=select.options[select.selectedIndex].value,mateSnail=SnailUtil.getSnailByName(mateName),geneCombos=[],i=0;selectedSnail.genes.length>i;i++){var ssGene=selectedSnail.genes[i],msGene=mateSnail.findGene(ssGene.name),combos=SnailUtil.getGeneCombos(ssGene,msGene);geneCombos.push(combos)}ui.displayBreedingPreviewChart(selectedSnail.name,mateName,geneCombos)}catch(e){}return!1}static getGeneCombos(gene1,gene2){var c1=new Gene(gene1.name);c1.allele1=gene1.allele1,c1.allele2=gene2.allele1;var c2=new Gene(gene1.name);c2.allele1=gene1.allele1,c2.allele2=gene2.allele2;var c3=new Gene(gene1.name);c3.allele1=gene1.allele2,c3.allele2=gene2.allele1;var c4=new Gene(gene1.name);return c4.allele1=gene1.allele2,c4.allele2=gene2.allele2,[c1,c2,c3,c4]}static tryBreedSnails(selection){try{var selectedSnail=SnailUtil.getSelectedSnail(),select=document.getElementById("breedSnailSelect"),mateName=select.options[select.selectedIndex].value,mateSnail=SnailUtil.getSnailByName(mateName);SnailUtil.checkCasualties(selectedSnail,mateSnail)||(new FoalGenerator).breedSnails(selectedSnail,mateSnail),incrementDay()}catch(e){}return!1}static checkCasualties(snail1,snail2){var cod=null;return null!==(cod=SnailUtil.doYoungDeathRoll(snail1))?(snail1.killAndNotify(cod),cod):null!==(cod=SnailUtil.doYoungDeathRoll(snail2))?(snail2.killAndNotify(cod),cod):(null!==(cod=SnailUtil.doOldDeathRoll(snail2))&&snail2.killAndNotify(cod),null!==(cod=SnailUtil.doOldDeathRoll(snail1))&&snail1.killAndNotify(cod),cod)}static checkDeath(snail,cod){null!==cod&&snail.killAndNotify(cod)}static doYoungDeathRoll(snail){var cod=null;return 1/snail.currentScale>MathUtil.getRandomInt(1,8)&&(cod=CauseOfDeath.TooYoung),cod}static doOldDeathRoll(snail){var cod=null,chance=snail.age-10;return MathUtil.getRandomInt(1,8)>chance||(cod=CauseOfDeath.TooOld),cod}static getAllLiveSnails(){return eligibleSnails.concat(immatureSnails)}static getAllSnails(){return eligibleSnails.concat(immatureSnails).concat(deadSnails)}static shuffleSnails(){for(var generator=new RandomSnailGenerator,liveSnails=SnailUtil.getAllLiveSnails(),newSnails=[],i=0;liveSnails.length>i;i++){var snail=liveSnails[i];if(15!==daysLeft&&snail.isBestAttempt)newSnails.push(snail);else{var newSnail=generator.generateRandomSnail();newSnail.posX=snail.posX,newSnail.posY=snail.posY,newSnails.push(newSnail)}}eligibleSnails=newSnails,immatureSnails=[],SnailUtil.getClosestSnailToBFF(),draw(),15!==daysLeft&&incrementDay()}static refreshSnailGrid(){var allSnails=SnailUtil.getAllSnails();if(0!==allSnails.length)for(var x=ui.breedingPoolBlock.posX,y=ui.breedingPoolBlock.posY+25,i=1;allSnails.length>i;i++){var snail=allSnails[i-1];snail.posX=x,snail.posY=y,i%4==0?(x=ui.breedingPoolBlock.posX,y+=80):x+=220}}static positionNewSnail(snail){var allSnails=SnailUtil.getAllLiveSnails();if(0!==allSnails.length){var posX=allSnails[allSnails.length-1].posX,posY=allSnails[allSnails.length-1].posY;allSnails.length%4==0?(posX=ui.breedingPoolBlock.posX,posY+=80):posX+=220,snail.posX=posX,snail.posY=posY}}static getClosestSnailToBFF(){for(i=0;deadSnails.length>i;i++){var deadSnail=deadSnails[i];deadSnail.isBestAttempt&&(deadSnail.isBestAttempt=!1)}for(var allSnails=SnailUtil.getAllLiveSnails(),closestSnail=null,i=0;allSnails.length>i;i++){var snail=allSnails[i];snail.age>0&&(snail.isBestAttempt&&(snail.isBestAttempt=!1),(null===closestSnail||snail.proximityToBestFriend>closestSnail.proximityToBestFriend)&&(closestSnail=snail))}closestSnail.isBestAttempt=!0}}class Snail{constructor(){this.name=this.generateRandomName(),this.weight=0,this.imgSrc="./img/snail.png",this.isBestFriend=!1,this.doDrawTile=!0,this.isBestAttempt=!1,this.generation=1,(this.img=new Image).src=this.imgSrc,this.currentScale=0,this.posX=0,this.posY=0,this.stagName="Wild Snail",this.doeName="Wild Snail",this.shellColor=new Color,this.patternColor=new Color,this.eyeColor=new Color,this.patternType=PatternType.SOLID,this.genes=[],this.lust=0,this.sexualOrientation=0,this.age=1,this.traitsInCommonWithBff=[],this.maxPoints=26}findGene(name){for(var i=0;this.genes.length>i;i++){var gene=this.genes[i];if(gene.name===name)return gene}return null}unlockNextGene(){var generator=new RandomSnailGenerator;2===year&&generator.generateEyeColor(this),3===year&&generator.generatePattenType(this),4>this.genes.length&&4===year&&generator.generatePatternColor(this),this.currentScale=1}generateRandomName(){for(var name="Unnamed#"+MathUtil.getRandomInt(1,50),allSnails=SnailUtil.getAllSnails(),i=0;allSnails.length>i;i++)if(allSnails[i].name===name)return this.generateRandomName();return name}ageSnail(){if(0===this.age){var idx=immatureSnails.indexOf(this);immatureSnails.splice(idx,1),eligibleSnails.push(this)}this.age++,1>this.currentScale&&(this.currentScale+=.25)}get isDead(){return-1!=deadSnails.indexOf(this)}get sexualOrientationDesc(){return 0===this.sexualOrientation?"sexually neutral":this.sexualOrientation>50?"very masculine":this.sexualOrientation>0?"slightly masculine":50>this.sexualOrientation?"very feminine":0>this.sexualOrientation?"slightly feminine":"very confused!"}get proximityToBestFriend(){return this.traitsInCommonWithBff.length}getTraitsInCommonWithBff(){this.traitsInCommonWithBff=[];for(var i=0;this.genes.length>i;i++){var gene=this.genes[i],bffGene=bestFriend.findGene(gene.name);GeneUtil.getDominantAllele(gene)===GeneUtil.getDominantAllele(bffGene)&&this.traitsInCommonWithBff.push(gene.name)}}showDetails(){ui.showSnailDetails(this)}killAndNotify(cod){var msg=this.name+" has died! It was "+cod+" and weak to breed.",idx=eligibleSnails.indexOf(this);eligibleSnails.splice(idx,1),deadSnails.push(this),alert(msg)}tryToRename(newName){if(newName.length>10)alert("Your new chosen name is more than 10 characters long! That's too long for a snail name.");else if(this.name!==bestFriend.name)if(bestFriend.name!==newName){for(i=0;eligibleSnails.length>i;i++)if((snail=eligibleSnails[i]).name===newName)return void alert("You already have a snail with that name!");for(var allSnails=SnailUtil.getAllLiveSnails(),i=0;allSnails.length>i;i++){var snail=allSnails[i];snail.doeName===this.name?snail.doeName=newName:snail.stagName===this.name&&(snail.stagName=newName)}this.name=newName,this.showDetails(),draw()}else alert("You shouldn't try to name another snail by the name of your best friend - it won't fill the hole in your heart.");else alert("You can't rename your missing best friend. You monster.")}drawTile(posX,posY){ctx.save();var color=new Color;color.R=255,color.G=255,color.B=255;var fill=ColorUtil.formatRGBA(color,.75);ctx.fillStyle=fill,ctx.strokeStyle=ColorUtil.formatRGBA(color,.5),ctx.lineJoin="round",ctx.lineWidth=10,ctx.strokeRect(posX+5,posY+5,205,65),ctx.fillRect(posX+5,posY+5,205,65),ctx.restore()}drawShell(posX,posY,offsetX,offsetY){offsetX+=42,offsetY+=26,ctx.save(),ctx.beginPath();var r=25*this.currentScale,x=posX+offsetX*this.currentScale,y=posY+offsetY*this.currentScale;ctx.arc(x,y,r,0,2*Math.PI);var fill=ColorUtil.formatRGBA(this.shellColor,1);ctx.fillStyle=fill,ctx.fill(),ctx.restore()}drawEye(posX,posY,offsetX,offsetY){offsetX+=10,offsetY+=10,ctx.save(),ctx.beginPath();var r=7*this.currentScale,x=posX+offsetX*this.currentScale,y=posY+offsetY*this.currentScale;ctx.arc(x,y,r,0,2*Math.PI);var fill=ColorUtil.formatRGBA(this.eyeColor,1);ctx.fillStyle=fill,ctx.fill(),ctx.restore()}drawCherryPattern(posX,posY,offsetX,offsetY){if(fill="#fff",null!==this.patternColor)var fill=ColorUtil.formatRGBA(this.patternColor,1);ctx.fillStyle=fill,ctx.beginPath();var r=5*this.currentScale,x=posX+offsetX+40*this.currentScale,y=posY+offsetY+15*this.currentScale;ctx.arc(x,y,r,0,2*Math.PI),ctx.fill(),x=posX+offsetX+30*this.currentScale,y=posY+offsetY+30*this.currentScale,ctx.beginPath(),ctx.arc(x,y,r,0,2*Math.PI),ctx.fill(),x=posX+offsetX+50*this.currentScale,y=posY+offsetY+30*this.currentScale,ctx.beginPath(),ctx.arc(x,y,r,0,2*Math.PI),ctx.fill()}drawSquareCherryPattern(posX,posY,offsetX,offsetY){if(fill="#fff",null!==this.patternColor)var fill=ColorUtil.formatRGBA(this.patternColor,1);ctx.fillStyle=fill;var l=10*this.currentScale,x=posX+offsetX+40*this.currentScale,y=posY+offsetY+15*this.currentScale;ctx.fillRect(x,y,l,l),x=posX+offsetX+30*this.currentScale,y=posY+offsetY+30*this.currentScale,ctx.fillRect(x,y,l,l),x=posX+offsetX+50*this.currentScale,y=posY+offsetY+30*this.currentScale,ctx.fillRect(x,y,l,l)}drawBlotchyPattern(posX,posY,offsetX,offsetY){ctx.beginPath();var r=20*this.currentScale,x=posX+offsetX+47*this.currentScale,y=posY+offsetY+30*this.currentScale;null!==this.patternColor&&ColorUtil.formatRGBA(this.patternColor,1),ctx.arc(x,y,r,-2,2*Math.PI),ctx.fill()}drawPattern(posX,posY,offsetX,offsetY){switch(ctx.save(),this.patternType){case PatternType.CHERRY:this.drawCherryPattern(posX,posY,offsetX,offsetY);break;case PatternType.SQUARECHERRY:this.drawSquareCherryPattern(posX,posY,offsetX,offsetY);break;case PatternType.BLOTCHY:this.drawBlotchyPattern(posX,posY,offsetX,offsetY)}ctx.restore()}drawSnail(posX,posY,offsetX,offsetY){ctx.save(),null!==this.shellColor&&this.drawShell(posX,posY,offsetX,offsetY),null!==this.eyeColor&&this.drawEye(posX,posY,offsetX,offsetY),null!==this.patternType&&this.drawPattern(posX,posY,offsetX,offsetY);var w=this.img.width,h=this.img.height,x=posX+offsetX,y=posY+offsetY;ctx.drawImage(this.img,x,y,w*this.currentScale,h*this.currentScale),ctx.restore()}drawStats(posX,posY){ctx.save(),ctx.font="15px Arial",ctx.fillStyle="green",ctx.textBaseline="top";var y=posY+10,x=posX+75;ctx.fillText(this.name,x,y),y+=13,this.isDead?ctx.fillText("DEAD",x,y):ctx.fillText("Age: "+this.age,x,y),this.name!==bestFriend.name&&(y+=13,ctx.fillText("Proximity Points: "+this.proximityToBestFriend,x,y)),ctx.restore()}drawOrienationSymbol(){var feminineColor=new Color;femininecolor.R=245,feminineColor.G=79,feminineColor.B=112;var masculineColor=new Color;masculineColor.R=33,masculineColor.G=150,masculineColor.B=243}drawEgg(){ctx.save(),ctx.beginPath(),ctx.arc(this.posX+35,this.posY+35,5,0,2*Math.PI);var fill=ColorUtil.formatRGBA(this.shellColor,1);ctx.fillStyle=fill,ctx.fill(),ctx.restore()}draw(){var posX=this.posX,posY=this.posY;!isDone&&this.isBestAttempt&&daysLeft>0&&(posX=ui.bestAttemptBlock.posX-20,posY=ui.bestAttemptBlock.posY+25),this.doDrawTile&&this.drawTile(posX,posY),0===this.age?this.drawEgg():this.age>0&&this.drawSnail(posX,posY,5,10),this.drawStats(posX,posY)}}class Gene{constructor(name){this.name=name,this.isActive=!1}}class ColorGene extends Gene{constructor(name){super(name),this.allele1=ColorAllele.Red,this.allele2=ColorAllele.Red}}class PatternGene extends Gene{constructor(name){super(name),this.allele1=PatternType.SOLID,this.allele2=PatternType.SOLID}}class GeneUtil{static getDominantAllele(gene){var dominantTrait=null;return gene instanceof ColorGene?dominantTrait=GeneUtil.getColorGeneDominantTrait(gene):gene instanceof PatternGene&&(dominantTrait=GeneUtil.getPatternGeneDominantTrait(gene)),dominantTrait}static getColorGeneDominantTrait(gene){var allele1=gene.allele1,allele2=gene.allele2;return allele1===ColorAllele.Red||allele2===ColorAllele.Red?ColorAllele.Red:allele1===ColorAllele.Green||allele2===ColorAllele.Green?ColorAllele.Green:allele1===ColorAllele.Blue||allele2===ColorAllele.Blue?ColorAllele.Blue:void 0}static getPatternGeneDominantTrait(gene){var allele1=gene.allele1,allele2=gene.allele2;return allele1===PatternType.SOLID||allele2===PatternType.SOLID?PatternType.SOLID:allele1===PatternType.CHERRY||allele2===PatternType.CHERRY?PatternType.CHERRY:allele1===PatternType.SQUARECHERRY||allele2===PatternType.SQUARECHERRY?PatternType.SQUARECHERRY:allele1===PatternType.BLOTCHY||allele2===PatternType.BLOTCHY?PatternType.BLOTCHY:void 0}}class SnailGenerator{pickColorFromGene(colorGene){return colorGene.allele1===ColorAllele.Red||colorGene.allele2===ColorAllele.Red?ColorUtil.pickRedColor(100,255):colorGene.allele1===ColorAllele.Blue||colorGene.allele2===ColorAllele.Blue?ColorUtil.pickBlueColor(100,255):ColorUtil.pickGreenColor(100,255)}pickPatternFromGene(patternGene){var a1=patternGene.allele1,a2=patternGene.allele2;return a1===PatternType.SOLID||a2===PatternType.SOLID?PatternType.SOLID:a1===PatternType.CHERRY||a2===PatternType.CHERRY?PatternType.CHERRY:a1===PatternType.SQUARECHERRY||a2===PatternType.SQUARECHERRY?PatternType.SQUARECHERRY:PatternType.BLOTCHY}}class FoalGenerator extends SnailGenerator{breedSnails(snail1,snail2){var stag=this.pickMaleSnail(snail1,snail2),doe=this.getFemaleSnail(stag,snail1,snail2);stag.sexualOrientation=100,doe.sexualOrientation=-100;var egg=this.generateEgg(stag,doe);egg.currentScale=0,egg.generation++,SnailUtil.positionNewSnail(egg),null!=bestFriend&&egg.getTraitsInCommonWithBff(),immatureSnails.push(egg)}pickMaleSnail(snail1,snail2){return snail1.sexualOrientation>snail2.sexualOrientation?snail1:snail2.sexualOrientation>snail1.sexualOrientation?snail2:0===MathUtil.getRandomInt(0,1)?snail1:snail2}getFemaleSnail(maleSnail,snail1,snail2){return snail1===maleSnail?snail2:snail1}generateEgg(stag,doe){var snail=new Snail;snail.age=-1,snail.stagName=stag.name,snail.doeName=doe.name;for(var i=0;stag.genes.length>i;i++){var stagGene=stag.genes[i],doeGene=doe.genes[i],foalGene=this.getGene(stagGene,doeGene);switch(snail.genes.push(foalGene),foalGene.name){case"Pattern Shape":snail.patternType=this.pickPatternFromGene(foalGene);break;case"Pattern Color":snail.patternColor=this.pickColorFromGene(foalGene);break;case"Shell Color":snail.shellColor=this.pickColorFromGene(foalGene);break;case"Eye Color":snail.eyeColor=this.pickColorFromGene(foalGene)}}return snail}getGene(stagGene,doeGene){var gene=Util.deepCopyObj(stagGene);return gene.allele1=this.generateAlleles(stagGene.allele1,stagGene.allele2),gene.allele2=this.generateAlleles(doeGene.allele1,doeGene.allele2),gene}generateAlleles(allele1,allele2){return[allele1,allele2][MathUtil.getRandomInt(0,1)]}pickFoalColorFromGene(colorGene,stagColor,doeColor){var color=null;if(colorGene.allele1==ColorAllele.Red||colorGene.allele2==ColorAllele.Red){var min=0,max=255;doeColor.Red>stagColor.Red?(min=stagColor.Red-10,max=doeColor.Red+10):(min=doeColor.Red-10,max=stagColor.Red+10),color=ColorUtil.pickRedColor(min,max)}else if(colorGene.allele1==ColorAllele.Green||colorGene.allele2==ColorAllele.Green){var min=0,max=255;doeColor.Green>stagColor.Green?(min=stagColor.Green-10,max=doeColor.Green+10):(min=doeColor.Green-10,max=stagColor.Green+10),color=ColorUtil.pickGreenColor(min,max)}else{var min=0,max=255;doeColor.Blue>stagColor.Blue?(min=stagColor.Blue-10,max=doeColor.Blue+10):(min=doeColor.Blue-10,max=stagColor.Blue+10),color=ColorUtil.pickBlueColor(min,max)}return color}}class RandomSnailGenerator extends SnailGenerator{generateRandomSnail(){var snail=new Snail;if(this.generateShellColor(snail),2>year||this.generateEyeColor(snail),3>year||this.generatePattenType(snail),4>year||this.generatePatternColor(snail),snail.currentScale=1,null!=bestFriend&&snail.name!==bestFriend.name){snail.getTraitsInCommonWithBff();for(var maxProx=Math.floor(year/2);snail.proximityToBestFriend>maxProx;)snail=this.generateRandomSnail()}return snail}generateShellColor(snail){var shellColorGene=new ColorGene("Shell Color");shellColorGene.allele1=this.pickRandomColorAllele(),shellColorGene.allele2=this.pickRandomColorAllele(),GeneUtil.getDominantAllele(shellColorGene),snail.genes.push(shellColorGene),snail.shellColor=this.pickColorFromGene(shellColorGene)}generatePatternColor(snail){var patternColorGene=new ColorGene("Pattern Color");patternColorGene.allele1=this.pickRandomColorAllele(),patternColorGene.allele2=this.pickRandomColorAllele(),snail.genes.push(patternColorGene),snail.patternColor=this.pickColorFromGene(patternColorGene)}generateEyeColor(snail){var eyeColorGene=new ColorGene("Eye Color");eyeColorGene.allele1=this.pickRandomColorAllele(),eyeColorGene.allele2=this.pickRandomColorAllele(),snail.genes.push(eyeColorGene),snail.eyeColor=this.pickColorFromGene(eyeColorGene)}generatePattenType(snail){var shellPatternGene=new PatternGene("Pattern Shape");shellPatternGene.allele1=this.pickRandomPatternAllele(),shellPatternGene.allele2=this.pickRandomPatternAllele(),snail.genes.push(shellPatternGene),snail.patternType=this.pickPatternFromGene(shellPatternGene)}pickRandomColorAllele(){var allele=null;switch(MathUtil.getRandomInt(0,2)){case 0:allele=ColorAllele.Red;break;case 1:allele=ColorAllele.Green;break;case 2:allele=ColorAllele.Blue}return allele}pickRandomPatternAllele(){var allele=null;switch(MathUtil.getRandomInt(0,3)){case 0:allele=PatternType.SOLID;break;case 1:allele=PatternType.CHERRY;break;case 2:allele=PatternType.SQUARECHERRY;break;case 3:allele=PatternType.BLOTCHY}return allele}generateSnailName(){var partOne=["Crimson","Beautiful","Blue","Red","Cantering","Cooky","Spicy","Crazy","Cool","Silver","Antarctic","Icy","Emerald","Volcanic","Busta"],partTwo=["Sunchaser","Cucumber","Velvet","River","Sky","Eraser","Kiko","Adam","Lining","Alex","Bo","Racer","Rock","Rhymes"],firstRand=MathUtil.getRandomInt(0,14),secondRand=MathUtil.getRandomInt(0,13);return partOne[firstRand]+" "+partTwo[secondRand]}}class MathUtil{static getRandomInt(min,max){return min=Math.ceil(min),max=Math.floor(max),Math.floor(Math.random()*(max-min+1))+min}}class ColorUtil{static pickRedColor(min,max){min=ColorUtil.clampColor(min),max=ColorUtil.clampColor(max);var color=new Color;return color.R=MathUtil.getRandomInt(min,max),color.G=MathUtil.getRandomInt(0,color.R),color.B=MathUtil.getRandomInt(0,color.R),color}static pickGreenColor(min,max){min=ColorUtil.clampColor(min),max=ColorUtil.clampColor(max);var color=new Color;return color.G=MathUtil.getRandomInt(min,max),color.R=MathUtil.getRandomInt(0,color.G),color.B=MathUtil.getRandomInt(0,color.G),color}static pickBlueColor(min,max){min=ColorUtil.clampColor(min),max=ColorUtil.clampColor(max);var color=new Color;return color.B=MathUtil.getRandomInt(min,max),color.G=MathUtil.getRandomInt(0,color.B),color.R=MathUtil.getRandomInt(0,color.B),color}static formatRGBA(color,alpha){return"rgba("+color.R+","+color.G+","+color.B+","+alpha+")"}static clampColor(num){return 0>num?num=0:num>255&&(num=255),num}static getDeltaE(color1,color2){var r1=color1.R,g1=color1.G,b1=color1.B,xyz1=ColorUtil.rgbToXyz(r1,g1,b1),lab1=ColorUtil.xyzToLab(xyz1[0],xyz1[1],xyz1[2]),r2=color2.R,g2=color2.G,b2=color2.B,xyz2=ColorUtil.rgbToXyz(r2,g2,b2),lab2=ColorUtil.xyzToLab(xyz2[0],xyz2[1],xyz2[2]);return ColorUtil.cie1994(lab1,lab2,!1)}static rgbToXyz(r,g,b){var _r=r/255,_g=g/255,_b=b/255;return _r>.04045?_r=Math.pow((_r+.055)/1.055,2.4):_r/=12.92,_g>.04045?_g=Math.pow((_g+.055)/1.055,2.4):_g/=12.92,_b>.04045?_b=Math.pow((_b+.055)/1.055,2.4):_b/=12.92,[.4124*(_r*=100)+.3576*(_g*=100)+.1805*(_b*=100),.2126*_r+.7152*_g+.0722*_b,.0193*_r+.1192*_g+.9505*_b]}static xyzToLab(x,y,z){var _X=x/95.047,_Y=y/100,_Z=z/108.883;return _X=_X>.008856?Math.pow(_X,1/3):7.787*_X+16/116,[116*(_Y=_Y>.008856?Math.pow(_Y,1/3):7.787*_Y+16/116)-16,500*(_X-_Y),200*(_Y-(_Z=_Z>.008856?Math.pow(_Z,1/3):7.787*_Z+16/116))]}static cie1994(x,y,isTextiles){var k2,k1,kl;x={l:x[0],a:x[1],b:x[2]},y={l:y[0],a:y[1],b:y[2]},isTextiles?(k2=.014,k1=.048,kl=2):(k2=.015,k1=.045,kl=1);var c1=Math.sqrt(x.a*x.a+x.b*x.b),c2=Math.sqrt(y.a*y.a+y.b*y.b),sh=1+k2*c1,sc=1+k1*c1,da=x.a-y.a,db=x.b-y.b,dc=c1-c2,dl=x.l-y.l,dh=Math.sqrt(da*da+db*db-dc*dc);return Math.sqrt(Math.pow(dl/(1*kl),2)+Math.pow(dc/(1*sc),2)+Math.pow(dh/(1*sh),2))}}class Color{constructor(){this.R=0,this.G=0,this.B=0}}class Util{static replaceAll(target,regex,newStr){return target.replace(RegExp(regex,"g"),newStr)}static deepCopyObj(obj){if(null==obj||"object"!=typeof obj)return obj;var copy=new obj.constructor;for(var attr in obj)obj.hasOwnProperty(attr)&&(copy[attr]=obj[attr]);return copy}}class InputHandler{constructor(){canvas.addEventListener("click",this.onClick,!1)}onClick(e){var rect=canvas.getBoundingClientRect(),mousePoint={posX:e.clientX-rect.left,posY:e.clientY-rect.top},allSnails=SnailUtil.getAllLiveSnails();isDone&&(allSnails=[SnailUtil.getBestAttempt()]),allSnails.push(bestFriend);for(var i=0;allSnails.length>i;i++){var snail=allSnails[i];if(inputHandler.hitsTarget(mousePoint,snail)){snail.showDetails();break}}}hitsTarget(point,target){var posX=target.posX,posY=target.posY;target.isBestAttempt&&!1===isDone&&(posX=ui.bestAttemptBlock.posX-20,posY=ui.bestAttemptBlock.posY+25);var widthHits=point.posX>=posX&&posX+200>=point.posX,heightHits=point.posY>=posY&&posY+85>=point.posY;return widthHits&&heightHits}static renameSelectedSnail(){var newName=prompt("Enter new name:","");SnailUtil.getSelectedSnail().tryToRename(newName)}}var canvas=document.getElementById("gameCanvas"),ctx=canvas.getContext("2d"),width=(document,document.body.clientWidth),canvasHeight=canvas.height,canvasWidth=canvas.width,instructions=document.getElementById("instructions"),details=document.getElementById("snailDetails"),split=(width-canvasWidth-100)/2;instructions.style.width=split+"px",details.style.width=split+"px",canvas.width=canvasWidth,canvas.height=canvasHeight,ctx.fillStyle="yellowgreen";var bestFriend,eligibleSnails=[],deadSnails=[],immatureSnails=[],daysLeft=15,year=1,ui=new GameplayUI,inputHandler=new InputHandler,globalAlpha=1,fadeInterval=.07,fading=!1,isDone=!1;main();
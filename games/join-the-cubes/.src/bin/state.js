import{FloatVec3,Quaternion}from"./webgl.js";const fillMap=({mapSize:t,cubes:e,generators:o})=>{const s=[];for(let e=0;e<t.x;e++){s.push([]);for(let o=0;o<t.y;o++){s[e].push([]);for(let a=0;a<t.z;a++)s[e][o].push(null)}}const a=new Quaternion(0,0,0,1),r=new FloatVec3(.5,.5,.5),i=t=>{const{position:e,modelView:o}=t,{x:i,y:n,z:h}=e;s[i][n][h]=t,o.compose(e,a,r)};return e.forEach(i),o.forEach(i),s};export var GrabState;!function(t){t[t.Drop=0]="Drop",t[t.Grabbing=1]="Grabbing",t[t.Grab=2]="Grab",t[t.Dropping=3]="Dropping"}(GrabState||(GrabState={}));const countGeneratorsByColor=t=>{const e=new Map;return t.generators.forEach(({color:t})=>{const o=e.get(t);e.set(t,void 0===o?1:o+1)}),e};export class State{constructor(t,e,o){this.mapSize=t,this.cubes=e,this.generators=o,this.camRot=0,this.targetCamRot=0,this.connectedCubes=new Set,this.fullyConnectedCubes=new Set,this.armRadius=.05,this.grabbedCube=null,this.grabRotAxis=new FloatVec3,this.grabState=GrabState.Drop,this.grabHeight=this.mapSize.y+.5,this.droppingRot1=new Quaternion,this.droppingRot2=new Quaternion,this.groundLevel=0,this.neighbourLevel=0,this.generatorCount=countGeneratorsByColor(this),this.camPos=new FloatVec3(0,-.5*this.mapSize.y,-2*Math.max(this.mapSize.x,this.mapSize.z)),this.targetCamPos=(new FloatVec3).copy(this.camPos),this.armPos=new FloatVec3(Math.round((this.mapSize.x-1)/2),10,Math.round((this.mapSize.z-1)/2)),this.targetArmPos=Object.assign({},this.armPos),this.cubesOnMap=fillMap(this)}firstNonempty(t,e){for(let o=this.mapSize.y-1;o>=0;o--)if(this.cubesOnMap[t]&&this.cubesOnMap[t][o]&&this.cubesOnMap[t][o][e])return o;return-1}}
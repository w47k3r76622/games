class Enemy{constructor(i,t,s,o,n){this.inTransitToSystem,this.position=i.position,this.orbitingSystem=i,this.speed=n&&n.speed||10,this.direction,this.directionLine,this.scene=t,this.starshipPosition=s,this.gameOverCallback=o,this.options=n;const e=new THREE.RingGeometry(3,6,2),h=new THREE.MeshBasicMaterial({color:n&&n.color||16711680}),r=new THREE.Mesh(e,h),c=new THREE.Raycaster,{x:p,y:T,z:a}=this.starshipPosition,{x:y,y:E,z:d}=this.orbitingSystem.position;let m=new THREE.Vector3(this.position.x-this.starshipPosition.x,this.position.y-this.starshipPosition.y,this.position.z-this.starshipPosition.z);m=m.normalize();const l=new THREE.Vector3(p,T,a),b=new THREE.Vector3(y,E,d),R=l.distanceTo(b);m.applyAxisAngle(new THREE.Vector3(1,0,0),.02),c.set(l,m);let w=new THREE.Vector3;c.ray.at(R,w),r.position.x=w.x,r.position.y=w.y,r.position.z=w.z,r.kind=n&&n.kind||"enemy",this.object3D=r,this.scene.add(r)}goTo(){const i=new THREE.Vector3(this.object3D.position.x,this.object3D.position.y,this.object3D.position.z);this.inTransitToSystem=this.scene.children.find(t=>{if(this.inTransitToSystem.uuid===t.uuid)return null;const s=this.options&&this.options.maxDistance||700;return("system"===t.kind||"singularity"===t.kind)&&i.distanceTo(new THREE.Vector3(t.position.x,t.position.y,t.position.z))>50&&i.distanceTo(new THREE.Vector3(t.position.x,t.position.y,t.position.z))<s});const t=new THREE.Vector3(this.inTransitToSystem.position.x-this.object3D.position.x,this.inTransitToSystem.position.y-this.object3D.position.y,this.inTransitToSystem.position.z-this.object3D.position.z);this.direction=t.normalize();const s=new THREE.Geometry;s.vertices.push(i),s.vertices.push(new THREE.Vector3(this.inTransitToSystem.position.x,this.inTransitToSystem.position.y,this.inTransitToSystem.position.z));const o=new THREE.LineBasicMaterial({color:this.options&&this.options.directionColor||5570560});this.directionLine=new THREE.Line(s,o),this.scene.add(this.directionLine)}move(){this.object3D.position.x+=this.direction.x*this.speed,this.object3D.position.y+=this.direction.y*this.speed,this.object3D.position.z+=this.direction.z*this.speed;const i=new THREE.Vector3(this.object3D.position.x,this.object3D.position.y,this.object3D.position.z),{x:t,y:s,z:o}=this.inTransitToSystem.position;i.distanceTo(new THREE.Vector3(t,s,o))<50&&(this.inTransitToSystem.systemId===this.orbitingSystemId&&this.gameOverCallback(),this.scene.remove(this.directionLine),this.goTo()),this.object3D.lookAt(this.starshipPosition)}think(){this.inTransitToSystem?this.move():(this.inTransitToSystem={},this.goTo())}setOrbitingSystemId(i){this.orbitingSystemId=i}}

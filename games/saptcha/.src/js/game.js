class Game{constructor(t,s,i,n,e,h){this.size=t,this.reward=s,this.penalty=i,this.expectedObject=null,this.points=0,this.round=0,this.images=null,this.startingAnimals=e,this.unlockedCount=n,this.unlockValue=h,this.unlockedAnimals=animals.slice(0,this.unlockedCount)}verify(t){const s=this.images.every((s,i)=>s.name===this.expectedObject===t[i]),i=this.points;if(s){if(this.points=this.points+this.reward,this.points>=this.unlockValue*(this.unlockedCount-this.startingAnimals+1)&&this.unlockedCount<animals.length){const t=animals[this.unlockedCount];return this.unlockedAnimals.push(t),this.unlockedCount+=1,{curr:i,next:this.points,newAnimal:t}}return{curr:i,next:this.points}}return this.points=clamp(this.points-this.penalty,0,Number.MAX_SAFE_INTEGER),{curr:i,next:this.points}}newRound(){return this.images=Array(this.size).fill(0).map(()=>this.unlockedAnimals[randomInt(0,this.unlockedAnimals.length)]),this.expectedObject=this.images[randomInt(0,this.images.length)].name,{comps:this.images.map(t=>t.comps),expected:this.expectedObject}}}window.Game=Game;
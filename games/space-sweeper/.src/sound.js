const audioContext=new(window.AudioContext||window.webkitAudioContext),masterGainNode=audioContext.createGain();function playTone(a,n=500,e=.25,t="square"){masterGainNode.gain.value=e;const o=audioContext.createOscillator();return o.connect(masterGainNode),o.type=t,o.frequency.value=a,o.start(),new Promise(a=>{setTimeout(()=>{o.stop(),a()},n)})}async function playStartsound(){await playTone(300,200),await playTone(500,100)}async function playGameOversound(){await playTone(300,150),await playTone(250,200),await playTone(150,250)}async function playWonTune(){await playTone(440,100),await playTone(0,50),await playTone(440,100),await playTone(0,50),await playTone(400,100),await playTone(0,50),await playTone(700,300)}async function playLooseTune(){await playTone(300,400),await playTone(0,100),await playTone(300,400),await playTone(250,200),await playTone(100,250)}masterGainNode.connect(audioContext.destination);const noteFreqMap={A:440,B:493.88,C:523.25,D:369.99,E:329.63,F:349.23,G:392};let play=!0;async function playTune(a=1,n=200){var e=.05,t="sawtooth",o=[.25,.5,1,2,2.25],p=o[Math.round(Math.random()*(o.length-1))];await playTone(noteFreqMap.A*p,4*n,e,t),await playTone(0,.25*n),await playTone(noteFreqMap.C*p,2*n,e,t),await playTone(0,.25*n),await playTone(noteFreqMap.G*p,2*n,e,t),await playTone(0,.25*n),await playTone(noteFreqMap.F*p,+n,e,t),await playTone(0,.25*n),await playTone(noteFreqMap.G*p,+n,e,t),await playTone(0,.25*n),await playTone(noteFreqMap.A*p,+n,e,t),await playTone(0,.25*n),await playTone(noteFreqMap.A*p,+n,e,t),await playTone(0,4*n),play&&playTune(a<o.length?++a:0,n)}function stopTune(){play=!1}export{playTone,playStartsound,playGameOversound,playWonTune,playLooseTune,playTune,stopTune};
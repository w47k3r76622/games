class Ship{constructor(i){this.ctx=i,this.image=new Image,this.image.src="ship.png",this.width=Math.round(.035*window.innerHeight),this.height=Math.round(.05*window.innerHeight),this.rocketsHeight=Math.round(this.height/2),this.rockets=[new Image,new Image],this.rockets.forEach((i,t)=>i.src=`rockets${t}.png`),this.explosions=new Array(16).fill(0).map(()=>new Image),this.explosions.forEach((i,t)=>i.src=`explosion${t%4}.png`),this.rocketToDraw=0,this.rocketsOn=!1,this.explosionIndex=null,setInterval(()=>{this.rocketToDraw=Math.round(Math.random())},50),window.addEventListener("deviceorientation",this.handleOrientation.bind(this))}init(){this.play=!0,this.lives=3,this.posY=Math.round(.8*window.innerHeight),this.posX=Math.round(.5*window.innerWidth)-this.width/2}handleOrientation(i){if(this.play){const t=Math.round(this.posY+.2*i.beta);i=Math.round(this.posX+.2*i.gamma);t<this.posY&&(this.rocketsOn=!0,setTimeout(()=>{t>=this.posY&&(this.rocketsOn=!1)},400)),this.posY=Math.max(0,Math.min(window.innerHeight-this.height,t)),this.posX=Math.max(0,Math.min(window.innerWidth-this.width,i)),this.draw()}}draw(){this.ctx.drawImage(this.image,this.posX,this.posY,this.width,this.height),this.rocketsOn&&this.ctx.drawImage(this.rockets[this.rocketToDraw],this.posX,this.posY+this.height,this.width,this.rocketsHeight),this.explosions[this.explosionIndex]&&(this.ctx.drawImage(this.explosions[this.explosionIndex],this.posX,this.posY,this.width,this.height),null!==this.explosionIndex&&this.explosionIndex<this.explosions.length-1?this.explosionIndex++:this.explosionIndex=null)}explode(){this.lives--,this.explosionIndex=0}stop(){this.play=!1}addLife(){this.lives++}}export default Ship;
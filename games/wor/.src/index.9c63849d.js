var t;let e,i;const n=({initialState:t})=>({type:"RESTART_GAME",payload:{initialState:t}});function o(t,e){return({RESTART_GAME:()=>e.payload.initialState})[e.type]?.(e.payload)}const a=()=>({type:"START_GAME"});function r(t,e){return({START_GAME:()=>({...t,gameState:"STARTED"})})[e.type](e.payload)}function l(t,e){if(t.row===e.row)return t.col>e.col?"LEFT":"RIGHT";if(t.col===e.col)return t.row>e.row?"UP":"DOWN";throw Error("Invalid direction")}function s(t){return`${t.row},${t.col}`}const m=(t,e)=>t.teamID===e.teamID&&"DEAD"!==e.unitState&&(t.position.row===e.position.row&&t.position.col===e.position.col+1||t.position.row===e.position.row&&t.position.col===e.position.col-1||t.position.col===e.position.col&&t.position.row===e.position.row+1||t.position.col===e.position.col&&t.position.row===e.position.row-1||t.position.row===e.position.row+1&&t.position.col===e.position.col+1||t.position.row===e.position.row+1&&t.position.col===e.position.col-1||t.position.row===e.position.row-1&&t.position.col===e.position.col+1||t.position.row===e.position.row-1&&t.position.col===e.position.col-1),c=({teamID:t,position:e,command:i})=>({type:"ADD_UNIT",payload:{teamID:t,position:e,command:i}}),d=({col:t,row:e})=>({type:"SELECT_UNIT",payload:{col:t,row:e}}),u=()=>({type:"START_BATTLE"}),p=t=>({type:"UPDATE_UNIT_COMMAND",payload:{command:t}}),T=t=>({type:"UPDATE_CAMERA",payload:{camera:t}}),I=(t,e)=>{if("UPDATE_CAMERA"===e.type){let{camera:{movement:i}}=e.payload,n=t.camera.offsetX+i.x,o=t.camera.offsetY+i.y;return{...t,camera:{...t.camera,offsetX:n,offsetY:o}}}if("UPDATE_UNIT_COMMAND"===e.type){let{command:i}=e.payload,n=t.units.find(e=>e.unitID===t.selectedUnitID);return{...t,units:t.units.map(e=>t.selectedUnitID===e.unitID||m(n,e)?{...e,command:i}:e)}}if("SELECT_UNIT"===e.type){let{col:i,row:n}=e.payload,o=t.units.find(t=>t.position.row===n&&t.position.col===i&&"PLAYER"===t.teamID&&"DEAD"!==t.unitState);return{...t,selectedUnitID:o?.unitID||null}}if("START_BATTLE"===e.type){// add units based on state.maxUnits to the CPU team in the top half of the board
// at random but grid aligned positions
let e=[];for(let i=0;i<t.maxUnits;i++){let i=Math.random().toString(36).substr(2,9),n={row:Math.floor(Math.random()*t.level.rows/2),col:Math.floor(Math.random()*t.level.cols)};e.push({teamID:"CPU",unitID:i,frame:0,position:n,command:"ATTACK_DOWN",unitState:"IDLE",hp:100,dmg:10,enemyTarget:null,lastBattle:null,zIndex:10})}return{...t,startedState:"BATTLING",startedAt:Date.now(),units:[...t.units,...e]}}if("TICK_PROGRESS"===e.type){let{gameTime:i}=e.payload,n=t.units.map(t=>{if("DEAD"===t.unitState)return t;if(t.unitState.startsWith("ATTACKING")){let e=0,n=[{duration:200},{duration:300}].map(t=>({...t,start:t.duration,end:e+=t.duration})),o=n.reduce((t,e)=>t+e.duration,0),a=n.findIndex(t=>i%o<=t.end);return{...t,frame:a}}return t});return{...t,units:n}}if("TICK"===e.type){if("BATTLING"===t.startedState){let e=Date.now(),i=e-t.startedAt>t.timeLimit,n=t.teams.filter(e=>!t.units.filter(t=>t.teamID===e.teamID).every(t=>"DEAD"===t.unitState));if(1===n.length||i){let e=n[0].teamID;if(n.length>1){// find the team with the most units alive
let i=n.map(e=>({teamID:e.teamID,count:t.units.filter(t=>t.teamID===e.teamID&&"DEAD"!==t.unitState).length})),o=Math.max(...i.map(t=>t.count)),a=i.find(t=>t.count===o);e=a.teamID}return{...t,gameState:"GAME_OVER",winningTeamID:e}}}return function(t){let e=t.units.map(e=>{if("DEAD"===e.unitState)return e;let i=t.units.filter(t=>"DEAD"!==t.unitState&&t.teamID!==e.teamID&&(t.position.row===e.position.row&&1===Math.abs(t.position.col-e.position.col)||t.position.col===e.position.col&&1===Math.abs(t.position.row-e.position.row)));// if there is an enemy in range target it
if(i.length>0)return e.unitState.startsWith("ATTACKING")?function(t,e){let i=e.unitState,n=e.enemyTarget,o=t.find(t=>t.unitID===n.unitID);if(!o){let o=t[0],a=l(e.position,o.position);i=`ATTACKING_${a}`,n={unitID:o.unitID}}let a=t.filter(t=>t.enemyTarget?.unitID===e.unitID),r=a.reduce((t,e)=>{let i=.1>Math.random(),n=.1>Math.random();return .1>Math.random()?{...t,misses:t.misses+1}:n&&!i?{...t,blocks:t.blocks+1,dmg:t.dmg+e.dmg/2}:i&&!n?{...t,crits:t.crits+1,dmg:t.dmg+2*e.dmg}:{...t,hits:t.hits+1,dmg:t.dmg+e.dmg}},{misses:0,crits:0,blocks:0,hits:0,dmg:0}),s=Math.max(e.hp-r.dmg,0);return 0===s&&(i="DEAD"),{...e,hp:s,unitState:i,lastBattle:r,enemyTarget:n,zIndex:"DEAD"===i?1:10}}(i,e):function(t,e){let i=t[0],n=l(e.position,i.position);return{...e,unitState:`ATTACKING_${n}`,enemyTarget:{unitID:i.unitID}}}(i,e);{let t="IDLE";if(e.command.startsWith("ATTACK")){let i=e.command.split("_")[1];t=`IDLE_${i}`}return{...e,unitState:t,enemyTarget:null,lastBattle:null}}}),i=[],n=new Map;e.filter(t=>"DEAD"!==t.unitState).forEach(e=>{let o=null;(()=>{if(e.unitState.startsWith("IDLE")&&e.command.startsWith("ATTACK")){// predict movement
let i=e.command.split("_")[1];if((o=function({direction:t,position:{col:e,row:i}}){switch(t){case"UP":return{row:i-1,col:e};case"DOWN":return{row:i+1,col:e};case"LEFT":return{row:i,col:e-1};case"RIGHT":return{row:i,col:e+1}}}({direction:i,position:e.position})).row>=0&&o.row<t.level.rows&&o.col>=0&&o.col<t.level.cols)return!0}return!1})()?i.push({unitID:e.unitID,nextPosition:o,prevPosition:e.position}):i.push({unitID:e.unitID,nextPosition:e.position,prevPosition:e.position}),n.set(s(e.position),e.unitID)});let o=(()=>{let t=e.filter(t=>"DEAD"!==t.unitState).map(t=>({unitID:t.unitID,children:[]})),n=[];return t.forEach(e=>{let o=i.find(t=>t.unitID===e.unitID),a=i.find(t=>t.unitID!==e.unitID&&t.prevPosition.row===o.nextPosition.row&&t.prevPosition.col===o.nextPosition.col);if(a){let i=t.find(t=>t.unitID===a.unitID);i.children.push(e)}else n.push(e)}),n})({state:t,predictedPositions:i}),a=t=>{t.forEach(t=>{let{nextPosition:o,prevPosition:r}=i.find(e=>e.unitID===t.unitID),l=!n.has(s(o));if(l){n.set(s(o),t.unitID),n.delete(s(r));let i=e.findIndex(e=>e.unitID===t.unitID),l=e[i],m=l.command.split("_")[1];e.splice(i,1,{...l,unitState:`MOVING_${m}`,position:o}),a(t.children)}})};return a(o),{...t,units:e}}(t)}if("ADD_UNIT"===e.type){let{teamID:i,position:n,command:o}=e.payload;if(!function(t,e){let{units:i,level:{rows:n},maxUnits:o}=t;// only teamID of player can place units, and only on the bottom half of the board
if(e.row<n/2)return console.debug("cannot place unit on top half of board"),!1;if(i.length>=o)return console.debug("cannot place unit, max units reached"),!1;let a=void 0===i.find(t=>t.position.row===e.row&&t.position.col===e.col);return!1!==a||(console.debug("cannot place unit, unit already at position"),!1)}(t,n,i))return t;let a=Math.random().toString(36).substr(2,9);return{...t,units:[...t.units,{teamID:i,unitID:a,frame:0,position:n,hp:100,dmg:10,command:o,unitState:"IDLE",enemyTarget:null,lastBattle:null,zIndex:10}]}}return t};let D=!1,f=null;function A({state:t,onRestartGame:e}){if(!D){let t=document.createElement("div");t.id="game-over-screen",t.innerHTML=`
      <h2>Game Over</h2>
      <h3 id="winner"></h3>
      <p>
        <button id="restart-button" class="btn">Play Again</button>
      </p>
    `;let e=document.querySelector("#game");e.appendChild(t);let i=document.querySelector("#restart-button");i.addEventListener("click",()=>{f()}),D=!0}f=e;let i=document.querySelector("#winner"),n=t.teams.find(e=>e.teamID===t.winningTeamID);i.textContent=`${n.name} wins!`,i.style.color=n.color}A.remove=function(){if(D){D=!1;let t=document.querySelector("#game-over-screen");t.remove()}};let h=!1;function E({startGame:t}){if(!h){let e=document.querySelector("#game");e.innerHTML=`
      <div id="title-screen">
        <h1>w\xf6r</h1>
        <p></p>
        <button id="start-button" class="btn">Start</button>
      </div>
    `;let i=document.querySelector("#start-button");i.addEventListener("click",()=>{t()}),h=!0}}E.remove=function(){if(h){h=!1;let t=document.querySelector("#title-screen");t.remove()}};let _=!1,S=null,v=null,w=null;function L({state:t,onClick:e,onUpdateCamera:i}){let{level:{cellSize:n,rows:o,cols:a},teams:r,units:l,selectedUnitID:s}=t;if(S=e,v=i,!_){w=document.querySelector("#sprite-sheet");let t=n*a,e=n*o,i=document.createElement("div");i.id="board",i.innerHTML=`
      <canvas id="board-canvas" width="${t}" height="${e}"></canvas>
    `;let r=document.querySelector("#game");r.appendChild(i);let l=!1,s=null,m=null,c=null,d=null;i.addEventListener("pointerdown",t=>{t.preventDefault(),s=t.offsetX,m=t.offsetY,l=!1;let e=t=>{t.preventDefault()};// Bug in iOS Safari movementX/Y: https://bugs.webkit.org/show_bug.cgi?id=248119
c=t.clientX,d=t.clientY;let o=t=>{let e=t.offsetX,i=t.offsetY;if(s&&m){let t=e-s,o=i-m;(Math.abs(t)>n||Math.abs(o)>n)&&(l=!0)}if(l){let e=t.movementX,i=t.movementY;(void 0===e||void 0===i)&&(e=t.clientX-c,i=t.clientY-d,c=t.clientX,d=t.clientY),v({movement:{x:e,y:i}})}},a=()=>{if(!l){let t=Math.floor(m/n),e=Math.floor(s/n);S({row:t,col:e})}u()},r=()=>{u()},u=()=>{s=null,m=null,l=!1,i.removeEventListener("pointermove",o),i.removeEventListener("pointerup",a),i.removeEventListener("contextmenu",e),i.removeEventListener("pointerleave",r)};i.addEventListener("pointermove",o),i.addEventListener("pointerup",a),i.addEventListener("contextmenu",e),i.addEventListener("pointerleave",r)}),_=!0}let c=document.querySelector("#board-canvas");c.width=n*a,c.height=n*o;// camera stuff
let d=t.camera;c.style.transform=`translate3d(${d.offsetX}px, ${d.offsetY}px, 0)`,c.style.width=`${n*a}px`,c.style.height=`${n*o}px`;let u=c.getContext("2d");u.imageSmoothingEnabled=!1,u.clearRect(0,0,c.width,c.height);let p={BOX_SELECTOR_1:0,BOX_SELECTOR_2:1,GRASS:3,TEXTURED_GRASS:4,HIGHLIGHTED_BOX_1:6,HIGHLIGHTED_BOX_2:5,PLAYER:{DEAD:23,IDLE:7,IDLE_DOWN:7,MOVING_DOWN:7,IDLE_UP:8,MOVING_UP:8,IDLE_RIGHT:9,MOVING_RIGHT:9,IDLE_LEFT:10,MOVING_LEFT:10,ATTACKING_DOWN:11,ATTACKING_UP:12,ATTACKING_RIGHT:13,ATTACKING_LEFT:14},CPU:{DEAD:24,IDLE:15,IDLE_DOWN:15,MOVING_DOWN:15,IDLE_UP:16,MOVING_UP:16,IDLE_RIGHT:17,MOVING_RIGHT:17,IDLE_LEFT:18,MOVING_LEFT:18,ATTACKING_DOWN:19,ATTACKING_UP:20,ATTACKING_RIGHT:21,ATTACKING_LEFT:22}};// draw a grid with black border and white background
for(let e=0;e<o;e+=1)for(let i=0;i<a;i+=1){// pick random grass frame
let a=[p.GRASS,p.TEXTURED_GRASS][(e%2?1:0)^(i%2?1:0)];u.drawImage(w,16*a,0,16,16,i*n,e*n,n,n),"PLACING_UNITS"===t.startedState&&e<o/2&&u.drawImage(w,16*p.HIGHLIGHTED_BOX_2,0,16,16,i*n,e*n,n,n)}l.sort((t,e)=>t.zIndex-e.zIndex);let T=l.find(t=>t.unitID===s);l.forEach(t=>{let{row:e,col:i}=t.position,o=t.frame,a=t.unitState;1===o&&(a=a.replace("ATTACKING","IDLE"));let r=p[t.teamID][a];u.drawImage(w,16*r,0,16,16,i*n,e*n,n,n),s&&s===t.unitID&&u.drawImage(w,16*p.BOX_SELECTOR_1,0,16,16,i*n,e*n,n,n),s&&m(T,t)&&u.drawImage(w,16*p.BOX_SELECTOR_1,0,16,16,i*n,e*n,n,n)}),// draw health bars
l.forEach(t=>{if("DEAD"===t.unitState||100===t.hp)return;u.fillStyle=function(t,e){let i=t.find(t=>t.teamID===e);return i}(r,t.teamID).color;let e=t.hp/100*n,i=n-4,o=t.position.col*n+2,a=t.position.row*n-5;u.fillRect(o,a,Math.min(e,i),4),u.strokeStyle="#000000",u.strokeRect(o+.5,a+.5,i,4)})}L.remove=()=>{if(_){_=!1;let t=document.querySelector("#board");t.remove()}};let y=!1,g=null;function G({maxUnits:t,unitsPlaced:e,onDone:i}){if(g=i,!y){let t=document.createElement("div");t.id="placing-units-overlay",t.classList.add("command-bar"),t.innerHTML=`
      <h3>Place your units<div id="placing-units-overlay-status"></div></h3>
      <button id="done-button" class="btn">battle</button>
    `;let e=t.querySelector("#done-button");e.addEventListener("click",()=>{g()});let i=document.querySelector("#game");i.appendChild(t),y=!0}let n=document.querySelector("#placing-units-overlay-status");n.innerHTML=`${e}/${t}`;let o=document.querySelector("#done-button");t===e&&o.removeAttribute("disabled")}G.remove=function(){if(y){y=!1;let t=document.querySelector("#placing-units-overlay");t.remove()}};let C=!1,b=null;const N=t=>{let e={ArrowUp:"ATTACK_UP",ArrowDown:"ATTACK_DOWN",ArrowLeft:"ATTACK_LEFT",ArrowRight:"ATTACK_RIGHT"," ":"HOLD",w:"ATTACK_UP",s:"ATTACK_DOWN",a:"ATTACK_LEFT",d:"ATTACK_RIGHT"}[t.key];e&&b(e)};function R({unit:t,onCommand:e}){if(b=e,!C){let t=document.createElement("div");t.id="selected-unit",t.innerHTML=`
      <div id="selected-unit-actions" class="hidden pad">
        <button data-command="ATTACK_UP" class="up">
          <i class="icon icon--large icon-up-arrow"></i>
        </button>
        <button data-command="ATTACK_DOWN" class="down">
          <i class="icon icon--large icon-down-arrow"></i>
        </button>
        <button data-command="ATTACK_LEFT" class="left">
          <i class="icon icon--large icon-left-arrow"></i>
        </button>
        <button data-command="ATTACK_RIGHT" class="right">
          <i class="icon icon--large icon-right-arrow"></i>
        </button>
        <button data-command="HOLD" class="middle">
          <i class="icon icon--large icon-hold"></i>
        </button>
      </div>
    `;let e=document.querySelector("#game");e.appendChild(t),document.querySelectorAll("[data-command]").forEach(t=>{t.addEventListener("click",()=>{b(t.dataset.command)})}),document.addEventListener("keydown",N),C=!0}let i=document.querySelector("#selected-unit-actions");t?i.classList.remove("hidden"):i.classList.add("hidden")}R.remove=function(){if(C){let t=document.querySelector("#selected-unit");t.remove(),document.removeEventListener("keydown",N),C=!1}};let M=!1;function U({timeLimit:t,startedAt:e}){if(!M){let t=document.createElement("div");t.id="timer",t.innerHTML=`
      TIME LEFT
      <div id="timer-bar">
        <div id="timer-bar-border">
          <div id="timer-bar-inner"></div>
        </div>
      </div>
    `;let e=document.querySelector("#game");e.appendChild(t),M=!0}let i=Date.now(),n=document.querySelector("#timer-bar-inner");n.style.width=`${Math.floor((t-(i-e))/t*100)}%`}U.remove=function(){M=!1;let t=document.querySelector("#timer");t&&t.remove()};const P={gameState:"STARTING",startedState:"PLACING_UNITS",maxUnits:30,units:[],selectedUnitID:null,level:{cellSize:32,rows:30,cols:30},teams:[{teamID:"PLAYER",name:"Player",color:"#3e63dd"},{teamID:"CPU",name:"CPU",color:"#e54d2e"}],camera:{offsetX:0,offsetY:0},startedAt:null,timeLimit:12e4,winningTeamID:null},O=(t=(t,e,i)=>({STARTING:r,STARTED:I,GAME_OVER:o})[t.gameState](t,e,i)||t,i=P,{dispatch:({type:n,payload:o})=>{i=t(i,{type:n,payload:o}),e&&setTimeout(()=>e(i),0)},onChange:t=>{e=t},get state(){return i}});let x=0;const K=new class{_onUpdate;_rafID;_isStopped=!1;_lastTs=0;_frame=0;_frameTimer;_frameTimerLimit;_gameTime=0;constructor(t,e=60){this._onUpdate=t,this._frameTimerLimit=Math.floor(1e3/e),this._frameTimer=this._frameTimerLimit}start(){this._isStopped=!1,this._rafID=requestAnimationFrame(this._update.bind(this))}stop(){this._isStopped=!0,cancelAnimationFrame(this._rafID)}_update(t){if(this._isStopped)return;let e=Math.floor(t-this._lastTs);this._gameTime+=e,this._frameTimer<=this._frameTimerLimit?this._frameTimer+=e:(this._frameTimer=this._frameTimerLimit,this._onUpdate({timeElapsed:e,gameTime:this._gameTime}),this._lastTs=t),this._rafID=requestAnimationFrame(this._update.bind(this))}}(({timeElapsed:t,gameTime:e})=>{(x+=t)>=1e3&&(O.dispatch({type:"TICK"}),x=0),O.dispatch({type:"TICK_PROGRESS",payload:{gameTime:e}})}),H=t=>{if("GAME_OVER"===t.gameState?(K.stop(),A({state:t,onRestartGame:()=>{O.dispatch(n({initialState:P}))}})):A.remove(),"STARTING"===t.gameState?E({startGame:()=>{O.dispatch(a()),K.start()}}):E.remove(),"STARTED"===t.gameState){let e;L({state:t,onClick:({row:e,col:i})=>{if("BATTLING"===t.startedState){O.dispatch(d({row:e,col:i}));return}O.dispatch(c({teamID:"PLAYER",command:"HOLD",position:{row:e,col:i}}))},onUpdateCamera:t=>{O.dispatch(T(t))}}),"PLACING_UNITS"===t.startedState?G({maxUnits:t.maxUnits,unitsPlaced:t.units.length,onDone:()=>O.dispatch(u())}):G.remove(),t.selectedUnitID&&(e=t.units.find(e=>e.unitID===t.selectedUnitID)),"BATTLING"===t.startedState?(U({startedAt:t.startedAt,timeLimit:t.timeLimit}),R({unit:e,units:t.units,onCommand:t=>{O.dispatch(p(t))}})):(U.remove(),R.remove())}else L.remove(),G.remove(),U.remove(),R.remove()};O.onChange(t=>{H(t)}),H(O.state);
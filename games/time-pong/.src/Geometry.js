var Geometry;(function(d){var c=(function(){function e(f,g){this.x=f;this.y=g}return e})();d.Point2D=c;var b=(function(){function e(g,i,f,h){this.x=g;this.y=i;this.a=f-g;this.b=h-i}e.prototype.intersectionFactor=function(f){return(f.a*(this.y-f.y)-f.b*(this.x-f.x))/(f.b*this.a-this.b*f.a)};e.prototype.intersectionFactorOther=function(f,g){if(f.a){return(this.x+this.a*g-f.x)/f.a}else{return(this.y+this.b*g-f.y)/f.b}};e.prototype.intersectsWith=function(f){var g=this.intersectionFactor(f);if(g<0||g>1){return false}var h=this.intersectionFactorOther(f,g);return h>=0&&h<=1};return e})();d.Segment=b;var a=(function(){function e(f){this.vertices=[];for(var g=0;g<f.length;g++){this.vertices.push([f[g][0],f[g][1],1])}}e.prototype.intersectsWith=function(f){for(var l=0;l<this.vertices.length;l++){var m=(l+1)%this.vertices.length;var k=new b(this.vertices[l][0],this.vertices[l][1],this.vertices[m][0],this.vertices[m][1]);for(var h=0;h<f.vertices.length;h++){var n=(h+1)%f.vertices.length;var g=new b(f.vertices[h][0],f.vertices[h][1],f.vertices[n][0],f.vertices[n][1]);if(k.intersectsWith(g)){return true}}}return false};return e})();d.Polygon=a})(Geometry||(Geometry={}));
var t=Object.defineProperty,e=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable,i=(e,s,n)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[s]=n,r=(t,r)=>{for(var o in r||(r={}))s.call(r,o)&&i(t,o,r[o]);if(e)for(var o of e(r))n.call(r,o)&&i(t,o,r[o]);return t},o=(t,e,s)=>(i(t,"symbol"!=typeof e?e+"":e,s),s);!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerpolicy&&(e.referrerPolicy=t.referrerpolicy),"use-credentials"===t.crossorigin?e.credentials="include":"anonymous"===t.crossorigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();class a{constructor(t=[0]){"number"==typeof t?(this.seeds=[t],this.seed=t):(this.seeds=[...t],this.seed=a.getSeedFromArray(t)),this.runningSeed=this.seed,this.i=0}static get(t){return a.chop(10001*Math.sin(t))}static chop(t){return t-Math.floor(t)}static normalize(t,e){return Math.floor(t*e)+1}static getSeedFromArray(t=[0],e=999999){const s=t.reduce(((t,e)=>a.get(e+t+8)),0);return a.normalize(s,e)}next(t){const e=t>.5?1:-1;this.runningSeed+=a.normalize(t,999999)*e,this.i+=1}getNext(t=0){const e=a.get(this.runningSeed);return this.next(e),t?a.normalize(e,t):e}get(t=0){const e=a.get(this.runningSeed);return t?a.normalize(e,t):e}getNextBell(t){return t*(this.getNext()-this.getNext())}getNormalizedArray(t=[]){return t.map((t=>this.getNext(t)))}}const l=["a","agg","atta","akk","bah","boo","coru","cron","corell","cu","dago","do","er","ej","fra","ga","hun","ho","ian","ill","iter","jar","jup","ko","lu","lo","ma","mer","na","ne","nep","nil","nt","ool","ol","org","po","plu","qua","ra","ry","rel","rg","sat","sun","sca","ta","to","th","tu","ter","ul","urn","us","ven","vu","vel","win","xen","xo","yo","za","zo"],c=[1,2,3];class h{constructor(t){this.name=h.getProceduralName(t)}toString(){return this.name}static getProceduralName(t=c){const e=new a(t);let s=e.getNext(3)+1,n="";for(;s--;){const t=e.getNext(l.length)-1;n+=l[t]}return n=n.charAt(0).toUpperCase()+n.slice(1),n}}const u=[{name:"hypergiant",luminosityClass:"Ia+"},{name:"luminous supergiant",luminosityClass:"Ia"},{name:"intermediate luminous superigant",luminosityClass:"Iab"},{name:"less luminous supergiant",luminosityClass:"Ib"},{name:"bright giant",luminosityClass:"II"},{name:"normal giant",luminosityClass:"III"},{name:"subgiant",luminosityClass:"IV"},{name:"dwarf (main-sequence star)",luminosityClass:"V"},{name:"subdwarf",luminosityClass:"sd"},{name:"white dwarf",luminosityClass:"D"}],m=u.length-1,g=[{tempClass:"O",color:"blue",rgb:[100,100,255]},{tempClass:"B",color:"blue white",rgb:[150,200,255]},{tempClass:"A",color:"white",rgb:[255,255,255]},{tempClass:"F",color:"yellow white",rgb:[255,255,100]},{tempClass:"G",color:"yellow",rgb:[255,255,100]},{tempClass:"K",color:"orange",rgb:[255,200,100]},{tempClass:"M",color:"red",rgb:[255,100,100]}];class d{constructor(t=[0,0],e=0,s,n){this.sector=s,this.sectorSystemIndex=n,this.sectorCoordinates=t;const i=[...t,e],r=new a(i);this.sunSize=r.getNext(1e3),this.planetCount=r.getNext(20),this.name=new h(i).toString(),this.heatLevel=Math.floor(Math.abs(r.getNextBell(700))),this.luminosityLevel=r.getNext(m+1)-1,this.spectralClassification=d.getSpectralClassification(this.heatLevel,this.luminosityLevel),this.dna=this.createDna(r)}createDna(t){this.dna=[];for(let e=0;e<12;e+=1)this.dna.push(t.getNext());return this.dna}static getSpectralClassification(t,e){let s=6-Math.floor(t/100),n=r({},g[s]),i=u[e];return n.drawColor=`rgb(${n.rgb[0]}, ${n.rgb[1]}, ${n.rgb[2]})`,n.numeral=Math.floor(t/7)/10,n.luminosityClass=i.luminosityClass,n.luminosityName=i.name,n}}class y{constructor(t=[0,0],e=0){const s=new a([...t,e]);this.galaxyPosition={x:t[0],y:t[1]},this.name=t.join(", "),this.systemCount=s.getNext(10),this.systems=[];for(let n=0;n<this.systemCount;n+=1){const t=s.getNext(1e4),i=s.getNext(1e4),r=new d([t,i],e,this,n);this.systems.push(r)}}}class p{constructor(t){this.seed=t}getSector(t,e){return new y([t,e],this.seed)}getSystem(t,e,s){return this.getSector(t,e).systems[s]}}const S="ship",C="station",f={ship:"fleet",station:"stations"},x={ship:"shipConstructionRate",station:"stationConstructionRate"},T=Object.freeze({command:{name:"Command Ship",maxHealth:4e3,shipConstructionRate:8,stationConstructionRate:8,resourceCollectionRate:8,maxResources:4,queueMax:2},scouts:{name:"Scouts",maxHealth:100,scienceRate:.1},colonizers:{name:"Colonizers",maxHealth:1200,maxResources:8,stationConstructionRate:10},constructors:{name:"Constructors",maxHealth:400,shipConstructionRate:1,stationConstructionRate:3},miners:{name:"Mining Ships",maxHealth:200,resourceCollectionRate:2},haulers:{name:"Haulers",maxHealth:200,maxResources:8}}),w=Object.freeze({settlements:{name:"Settlements",maxHealth:1e3,maxResources:100},shipyards:{name:"Shipyards",maxHealth:900,shipConstructionRate:10,maxResources:5},collectors:{name:"Collectors",maxHealth:750,resourceCollectionRate:9,maxResources:5},laboratory:{name:"Laboratory",maxHealth:1e3,scienceRate:1.4,resourceCollectionRate:1},administration:{name:"Administration Center",maxHealth:850,maxResources:10,queueMax:3}}),b=Object.keys(T),N=Object.keys(w),v={fleet:{command:[T.command.maxHealth],scouts:[],colonizers:[],constructors:[],miners:[],haulers:[]},stations:{settlements:[w.settlements.maxHealth],shipyards:[],collectors:[]},resources:0,scienceLeft:0,queue:[]},I={fleet:{},stations:{},resources:0,scienceLeft:0,queue:[]},R={location:"0,0,0",lastComputeDateTime:null,science:0,transit:[],space:{fleet:{haulers:[]}},systems:{"0,0,0":v}},H={transit:[{speed:0}],systems:{"0,0,0":{shipConstructionRate:0,stationConstructionRate:0,settlementRate:0,resourceCollectionRate:0,maxResources:0,scienceRate:0,queueMax:0}}};function E(t){return JSON.parse(JSON.stringify(t))}const k=class{constructor(t=R){this.data=E(t),this.computed=E(H),this.compute()}static getShipDetails(t){return T[t]?E(T[t]):null}static getStationDetails(t){return w[t]?E(w[t]):null}static getThingDetails(t,e){return k[t===S?"getShipDetails":"getStationDetails"](e)}static getThingMaxHealth(t,e){return k.getThingDetails(t,e).maxHealth||0}getCurrentCoordinates(){return this.data.location.split(",").map((t=>Number(t)))}getCurrentSystemKey(){return this.data.location}getCurrentSystem(){return this.data.systems[this.data.location]||{}}getCurrentFleet(){return this.getCurrentSystem().fleet}getCurrentStations(){return this.getCurrentSystem().stations}getSystemThings(t,e){return this.data.systems[t][f[e]]}getSystemThingsArray(t,e,s){const n=this.data.systems[t][f[e]];return n[s]||(n[s]=[]),n[s]}setSystemThingsArray(t,e,s,n=[]){return this.data.systems[t][f[e]][s]=n}getConstructionIndex(t,e,s){const n=this.getSystemThingsArray(t,e,s),i=k.getThingMaxHealth(e,s);return n.findIndex((t=>t<i))}getFirstConstructionIndex(t,e){const s=this.getSystemThings(t,e);let n=null,i=-1;return Object.keys(s).forEach((s=>{const r=this.getConstructionIndex(t,e,s);-1!==r&&(n=s,i=r)})),{constructionKey:n,constructionIndex:i}}getSettledSystemsCount(){return Object.keys(this.data.systems).reduce(((t,e)=>t+this.getCompletedThingCount(e,C,"settlements")),0)}getExploredSystemsCount(){return Object.keys(this.data.systems).length}isQueueFull(t){const e=this.getCurrentSystem(),s=this.computed.systems[t];return e.queue.length>=s.queueMax}enqueueThing(t,e){const s=this.getCurrentSystemKey(),n=this.getCurrentSystem();if(n.queue||(n.queue=[]),this.isQueueFull(s))return!1;const i=this.getSystemThingsArray(s,t,e);let r=0;return i?(i.push(0),r=i.length-1):this.setSystemThingsArray(s,t,e,[0]),n.queue.push([t,e,r]),!0}enqueueShip(t){return this.enqueueThing(S,t)}enqueueStation(t){return this.enqueueThing(C,t)}dequeueBuilt(){const t=this.getCurrentSystemKey(),e=this.data.systems[t],{queue:s}=e;for(let n=s.length-1;n>=0;n-=1){const[e,i,r]=s[n],o=k.getThingMaxHealth(e,i);this.getSystemThingsArray(t,e,i)[r]>=o&&s.splice(n,1)}}removeThing(t,e,s){this.getSystemThingsArray(t,e,s).length=0}makeNewSystem(t,e){this.data.systems[t]=E(I);this.data.systems[t].scienceLeft=Math.ceil(1e3*e.dna[0])}instaTravel(t,e=[],s){console.log(t,e);const n=this.data.location,{systems:i}=this.data;i[t]||this.makeNewSystem(t,s),e.forEach((e=>{const[s,i]=e,r=E(this.getSystemThingsArray(n,s,i));this.removeThing(n,s,i),this.setSystemThingsArray(t,s,i,r)})),this.data.location=t,this.computeSystem(t,0)}getThingViewModel(t,e,s){const n=this.getSystemThingsArray(t,e,s),i=this.getCompletedThingCount(t,e,s),o=n?n.length:0,a=this.getConstructionIndex(t,e,s),l=k.getThingMaxHealth(e,s),c=k.getThingDetails(e,s),h=!this.isQueueFull(t),u=n[a]||0;let m=0;a>-1&&l&&(m=u/l*100);return Object.assign({completedCount:i,incompletedCount:o-i,totalCount:o,progressPercent:m,health:u,maxHealth:l,cost:l,canBuild:h},r({},c))}getCurrentSystemViewModel(){const t=this.data.location,e=this.data.systems[t],s=this.computed.systems[t],n=Object.assign({},E(e),s);return Object.keys(T).forEach((e=>{n.fleet[e]=this.getThingViewModel(t,S,e)})),Object.keys(w).forEach((e=>{n.stations[e]=this.getThingViewModel(t,C,e)})),n}getCompletedThingCount(t,e,s){const n=this.getSystemThings(t,e)[s];if(!(n instanceof Array))return 0;const i=k.getThingMaxHealth(e,s);return n.reduce(((t,e)=>t+(e>=i?1:0)),0)}constructThing(t,e,s,n,i){const r=this.getSystemThings(t,e)[s],o=k.getThingMaxHealth(e,s),a=o-r[n],l=Math.min(a,i);return r[n]+=l,r[n]>=o&&this.dequeueBuilt(),l}computeSystem(t,e=0){const s=this.data.systems[t];this.computed.systems[t]||(this.computed.systems[t]={});const n=this.computed.systems[t];n.resourceCollectionRate=1,n.maxResources=100;const i=["shipConstructionRate","stationConstructionRate","resourceCollectionRate","maxResources","scienceRate","queueMax"];if(i.forEach((t=>{n[t]=0})),[S,C].forEach((e=>{const s=this.getSystemThings(t,e);Object.keys(s).forEach((s=>{const r=k.getThingDetails(e,s),o=this.getCompletedThingCount(t,e,s);0!==o&&i.forEach((t=>{r[t]&&(n[t]+=o*r[t])}))}))})),!e)return;const r=n.resourceCollectionRate*e;let o=s.resources+r;s.queue&&s.queue.length>0&&s.queue.forEach((s=>{const[i,r,a]=s,l=n[x[i]]*e,c=Math.min(o,l),h=this.constructThing(t,i,r,a,c);o-=h})),n.queueSize=s.queue.length,s.resources=Math.min(o,n.maxResources);const a=Math.min(n.scienceRate,s.scienceLeft);s.scienceLeft-=a,this.data.science+=a}compute(t=0){this.data.lastComputeDateTime=new Date,Object.keys(this.data.systems).forEach((e=>this.computeSystem(e,t)))}advance(t=1){this.compute(t)}};let L=k;o(L,"THING_SHIP",S),o(L,"THING_STATION",C),o(L,"SHIP_KEYS",b),o(L,"STATION_KEYS",N),o(L,"PROPERTY_LABELS",{name:"Name",maxHealth:"Cost",shipConstructionRate:"Ship Construction Rate",stationConstructionRate:"Station Construction Rate",resourceCollectionRate:"Resource Collection Rate",maxResources:"Max Resources",maxCount:"Max Count",queueMax:"Max Queue Size"});class M{constructor(){this.version="1.0.1",this.seed=13312,this.loopTickTime=202,this.zoom=1,this.viewerPosition={x:0,y:0},this.galaxy=new p(1e3),this.empire=new L,this.timerId=null,this.lastTime=0,this.selected={},this.showThingKey=null,console.log(this,this.galaxy.getSector(0,0)),window.document.addEventListener("DOMContentLoaded",(()=>this.setup()))}getCurrentSystem(){const t=this.empire.getCurrentCoordinates();return this.galaxy.getSector(t[0],t[1]).systems[t[2]]}loop(){const t=window.performance.now(),e=t-this.lastTime;this.lastTime=t,this.empire.advance(e/1e3),this.draw(),this.timerId=window.setTimeout((()=>this.loop()),this.loopTickTime)}start(){this.lastTime=window.performance.now(),this.loop()}stop(){window.clearTimeout(this.timerId)}getLocalStorageKey(){return"mo13ks_empireData"}save(){window.localStorage.setItem(this.getLocalStorageKey(),JSON.stringify(this.empire.data)),this.getElt("save-load-info").innerText=`Saved data from ${this.empire.data.lastComputeDateTime}`}load(){try{const t=window.localStorage.getItem(this.getLocalStorageKey()),e=JSON.parse(t);this.empire=new L(e),this.getElt("save-load-info").innerText=`Loaded data from ${e.lastComputeDateTime}`,this.refresh()}catch(t){window.alert(`Load failed\n${t}`),console.error(t)}}new(){window.location.reload()}getElt(t){return window.document.getElementById(t)}setText(t,e){this.getElt(t).innerText=e}addClick(t,e){this.getElt(t).addEventListener("click",e)}toggleSelection(t,e){const s=`${t}_${e}`;this.selected[s]=!Boolean(this.selected[s]),this.draw()}clearSelected(){this.selected={}}isSelected(t,e){return this.selected[`${t}_${e}`]}getSelected(){return Object.keys(this.selected).map((t=>{if(!this.selected[t])return null;return t.split("_")}))}getSelectedCount(){return Object.keys(this.selected).reduce(((t,e)=>t+(this.selected[e]?1:0)),0)}toggleListInfo(t,e){t.classList.toggle("show-info"),this.showThingKey=this.showThingKey===e?null:e}handleListClick(t,e,s){const n=t.target.closest(".build-button"),i=t.target.closest(".thing");if(!i)return;const{key:r}=i.dataset;r?n?this.empire.enqueueThing(e,r):"travel-toggle"!==t.target.className?this.toggleListInfo(i,r):this.toggleSelection(e,r):console.warn("No key",i)}refresh(){this.clearSelected(),this.drawSystem(),this.draw()}travel(t){const e=t.split(",").map((t=>Number(t))),s=this.galaxy.getSystem(e[0],e[1],e[2]);this.empire.instaTravel(t,this.getSelected(),s),this.refresh()}handleSystemListClick(t){const e=t.target.closest(".travel-button"),s=t.target.closest(".system");if(!s)return;const{key:n}=s.dataset;e&&n&&this.travel(n)}setupEvents(){this.addClick("station-list",(t=>this.handleListClick(t,L.THING_STATION))),this.addClick("fleet-list",(t=>this.handleListClick(t,L.THING_SHIP))),this.addClick("system-list",(t=>this.handleSystemListClick(t))),this.addClick("save-game",(()=>this.save())),this.addClick("load-game",(()=>this.load())),this.addClick("new-game",(()=>this.new()))}setup(){this.setupEvents(),this.empire.advance(1),this.getElt("seed").innerText=this.seed,this.getElt("version").innerText=this.version,this.refresh(),this.start()}static formatNumber(t){if("number"!=typeof t)return t;return(t<30?Math.floor(10*t)/10:Math.floor(t)).toLocaleString()}drawStats(t){Object.keys(t).forEach((e=>{const s=this.getElt(e);if(!s)return;const n=t[e];s.innerText=M.formatNumber(n)})),this.setText("empire-science",M.formatNumber(this.empire.data.science))}static getProgressBarHtml(t,e,s){return`<div class="progress" style="width: ${t}%">\n\t\t\t\t${M.formatNumber(t)}%\n\t\t\t\t(${M.formatNumber(e)}/${M.formatNumber(s)})\n\t\t\t</div>`}getThingInfoHtml(t,e){const s=L.getThingDetails(t,e);if(!s)return"N/A";delete s.name;let n="";for(let i in s){n+=`<div>${L.PROPERTY_LABELS[i]||i}: ${s[i]}</div>`}return n}getListItemsHtml(t,e=[],s=[],n={}){let i="";return e.forEach((e=>{const r=s[e]||{},o=r.completedCount||0,a=r.totalCount||o,l=e===this.showThingKey,c=this.isSelected(t,e),h=a>o,u=h?`/${a}`:"",m=r.health||0,g=r.maxHealth||0,d=s[e]?s[e].progressPercent:0,y=["thing"];o<=0&&y.push("none"),h&&y.push("building"),c&&y.push("selected"),l&&y.push("show-info"),i+=`<li class="${y.join(" ")}" data-key="${e}">\n\t\t\t\t\t<span class="thing-name">${r.name||e}</span>\n\t\t\t\t\t<span class="thing-count">${o}${u}</span>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<button type="button" class="build-button"\n\t\t\t\t\t\t\t${r.canBuild?"":'disabled="disabled"'}>+</button>\n\t\t\t\t\t</span>\n\t\t\t\t\t${n.showTravelToggle?`<span>\n\t\t\t\t\t\t<input type="checkbox" class="travel-toggle"\n\t\t\t\t\t\t\t${c?'checked="checked"':""}\n\t\t\t\t\t\t\t${o<=0?'disabled="disabled"':""} />\n\t\t\t\t\t\t</span>`:""}\n\t\t\t\t\t${h?`<div class="build-progress">${M.getProgressBarHtml(d,m,g)}</div>`:""}\n\t\t\t\t\t<div class="thing-info">\n\t\t\t\t\t\t${this.getThingInfoHtml(t,e)}\n\t\t\t\t\t</div>\n\t\t\t\t</li>`})),i}getSystemItemsHtml(t,e){let s="";return t.forEach((t=>{const n=[t.sector.galaxyPosition.x,t.sector.galaxyPosition.y,t.sectorSystemIndex].join(",");s+=`<li class="system" data-key="${n}">\n\t\t\t\t\t<span>${t.name}\n\t\t\t\t\t\t<br>\n\t\t\t\t\t\t<span class="system-list-sector">Sector ${t.sector.name}</span>\n\t\t\t\t\t</span>\n\t\t\t\t\t\x3c!-- <span>Distance: xxxx</span> --\x3e\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<button type="button"\n\t\t\t\t\t\t\tclass="travel-button"\n\t\t\t\t\t\t\t${e<=0?'disabled="disabled"':""}\n\t\t\t\t\t\t\t>☄️</button>\n\t\t\t\t\t</span>\n\t\t\t\t</li>`})),s}drawStations(t){const{stations:e}=t;this.getElt("station-list").innerHTML=this.getListItemsHtml(L.THING_STATION,L.STATION_KEYS,e)}drawFleet(t){const{fleet:e}=t;this.getElt("fleet-list").innerHTML=this.getListItemsHtml(L.THING_SHIP,L.SHIP_KEYS,e,{showTravelToggle:!0})}drawTravel(t){const e=this.getSelectedCount();this.getElt("travel").classList.toggle("ready",e>0),this.setText("selected-count",e);const s=this.getNearbySystems();this.getElt("system-list").innerHTML=this.getSystemItemsHtml(s,e)}drawSystem(){const t=this.getCurrentSystem(),e=t.spectralClassification;this.setText("system-name",t.name),console.log(e),this.getElt("spectral").innerHTML=`<span style="color: ${e.drawColor}">\n\t\t\t\t${e.tempClass}${e.numeral}${e.luminosityClass}\n\t\t\t\t${e.luminosityName}\n\t\t\t</span>`,this.setText("planet-count",t.planetCount),this.setText("sector-coords",t.sectorCoordinates.join(", ")),this.setText("sector-name",t.sector.name),this.setText("explored-count",this.empire.getExploredSystemsCount()),this.setText("settled-count",this.empire.getSettledSystemsCount())}getSystemDrawingObjects(t){return{type:"rect",x:0,y:0,size:[10,10],className:"sector-grid"}}getSectorDrawingObjects(t,e){const s=this.galaxy.getSector(t,e),n=[{type:"rect",x:100*t,y:100*e,size:[100,100],className:"sector-grid"},{type:"text",x:100*t,y:100*e,text:`${t}, ${e}`,className:"sector-coords"}];return s.systems.forEach((t=>n.push(this.getSystemDrawingObjects(t)))),n}getVisibleThings(){const t=-10,e=10,s=10,n=[];for(let i=-10;i<=s;i+=1)for(let s=t;s<=e;s+=1)n.push(this.getSectorDrawingObjects(s,i));return n}getNearbySectors(){const t=this.empire.getCurrentCoordinates(),e=-1,s=1,n=1,i=[];for(let r=-1;r<=n;r+=1)for(let n=e;n<=s;n+=1){const e=this.galaxy.getSector(t[0]+n,t[1]+r);i.push(e)}return i}getNearbySystems(){const t=this.getNearbySectors();let e=[];return t.forEach((t=>{e=e.concat(t.systems)})),e}draw(){const t=this.empire.getCurrentSystemViewModel();this.drawStats(t),this.drawStations(t),this.drawFleet(t),this.drawTravel(t)}}window.g=new M,window.g.Game=M,window.g.Empire=L;
